local GUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/BloodLetters/Ash-Libs/refs/heads/main/source.lua"))()
GUI:CreateMain({
    Name = "Ashlabs",
    title = "Arm Wrestle Simulator",
    ToggleUI = "K",
    WindowIcon = "home", -- you can use lucid icons
    -- WindowHeight = 600, -- default height
    -- WindowWidth = 800, -- default width
    Theme = {
        Background = Color3.fromRGB(25, 25, 35),
        Secondary = Color3.fromRGB(35, 35, 45),
        Accent = Color3.fromRGB(138, 43, 226),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(180, 180, 180),
        Border = Color3.fromRGB(50, 50, 60),
        NavBackground = Color3.fromRGB(20, 20, 30)
    },
    Blur = { -- Buggy
        Enable = false, -- transparent option
        value = 0.2
    },
    Config = { -- not implemented yet
        Enabled = false,
    }
})

local main = GUI:CreateTab("Main", "user-round") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Player"
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Claim", 
    default = true, 
    callback = function(claim)
	if claim then	
	_G.claim1 = true
	while _G.claim1 == true do
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local KnitServices = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services")

-- EventPassService Remotes
local EventPassRF = KnitServices:WaitForChild("EventPassService"):WaitForChild("RF")

-- TimedRewardService Remotes
local TimedRewardRE = KnitServices:WaitForChild("TimedRewardService"):WaitForChild("RE")

-- Reset Event Pass
EventPassRF:WaitForChild("Reset"):InvokeServer()

-- Claim all Free Event Pass rewards (1–12)
for i = 1, 12 do
	EventPassRF:WaitForChild("ClaimReward"):InvokeServer("Free", i)
end

-- Claim selected Timed Rewards
local timedRewards = {"1","2","3","6","8","9","11","12"}

for _, id in ipairs(timedRewards) do
	TimedRewardRE:WaitForChild("onClaim"):FireServer(id)
end
task.wait(120)
end
		else
		_G.claim1 = false
           end
        print("Toggle state:", claim)
    end
})

GUI:CreateToggle({
    parent = main, 
    text = "Auto Roll Aura", 
    default = true, 
    callback = function(Aura)
if Aura then
        _G.loop3 = true
	while _G.loop3 == true do
		task.wait(0.1)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("AuraService"):WaitForChild("RF"):WaitForChild("Roll"):InvokeServer()
           end
		else
		_G.loop3 = false
           end
		print("Toggle state:", Aura)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Insert Goliath", 
    default = false, 
    callback = function(state)
        getgenv().AUTO_INSERT_GOLIATH = state

        if state then
            task.spawn(function()
                local Players = game:GetService("Players")
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local CollectionService = game:GetService("CollectionService")
                local Knit = require(ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit"))
                local player = Players.LocalPlayer

                repeat task.wait() until Knit.GetController and Knit.GetService

                local GoliathController = Knit.GetController("GoliathController")
                local PetService        = Knit.GetService("PetService")
                local GoliathService    = Knit.GetService("PetGoliathService")
                local ItemController    = Knit.GetController("ItemController")
                local PetCraftTypes     = require(ReplicatedStorage:WaitForChild("Enums"):WaitForChild("PetCraftTypes"))

                local BOLTS_COST = 100

                local function hasBolts()
                    return ItemController:GetItemAmount("Bolts") >= BOLTS_COST
                end

                while getgenv().AUTO_INSERT_GOLIATH do
                    pcall(function()
                        if hasBolts() and GoliathController.PetsInMachine then
                            for _, slot in ipairs(CollectionService:GetTagged("GoliathSlot")) do
                                if not slot:GetAttribute("Taken") then
                                    PetService:getOwned(player):andThen(function(pets)
                                        for guid, petData in pairs(pets) do
                                            if petData.CraftType == PetCraftTypes.Huge then
                                                print("[AutoInsert] Placing pet:", petData.Key, "into", slot.Name)
                                                GoliathService.onPurchase:Fire(guid, slot.Name)
                                                return
                                            end
                                        end
                                    end)
                                    break
                                end
                            end
                        end
                    end)
                    task.wait(3)
                end
            end)
        end
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Claim Goliath", 
    default = false, 
    callback = function(state)
        getgenv().AUTO_CLAIM_GOLIATH = state

        if state then
            task.spawn(function()
                local Players = game:GetService("Players")
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local CollectionService = game:GetService("CollectionService")
                local Knit = require(ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit"))
                local player = Players.LocalPlayer

                repeat task.wait() until Knit.GetController and Knit.GetService

                local GoliathController = Knit.GetController("GoliathController")
                local GoliathService    = Knit.GetService("PetGoliathService")

                while getgenv().AUTO_CLAIM_GOLIATH do
                    pcall(function()
                        if GoliathController.PetsInMachine then
                            for _, slot in ipairs(CollectionService:GetTagged("GoliathSlot")) do
                                local slotPet = GoliathController.PetsInMachine[slot.Name]
                                if slotPet then
                                    local guid = slotPet.Guid
                                    local timer = GoliathController.PetMachineTimer[guid]
                                    if timer and timer - require(ReplicatedStorage.Vendor.RealTime)() <= 0 then
                                        print("[AutoClaim] Claiming pet from slot:", slot.Name)
                                        GoliathService.onClaim:Fire(guid, slot.Name)
                                    end
                                end
                            end
                        end
                    end)
                    task.wait(3)
                end
            end)
        end
    end
})


local main = GUI:CreateTab("Machine and Shop", "webhook") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Shop"
})

GUI:CreateToggle({
    parent = main, 
    text = "Squid Merchant", 
    default = true, 
    callback = function(squid)
if squid then
        _G.squid1 = true
	while _G.squid1 == true do
task.wait(200)
local args = {"Hidden Merchant",4}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Hidden Merchant",5}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Frontman Merchant",5}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"BrainrotMarket",9}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("UniversalShopService"):WaitForChild("RF"):WaitForChild("Buy"):InvokeServer(unpack(args))
local args = {"Frozen Merchant",4}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Frozen Merchant",5}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

end
		else
		_G.squid1 = false
           end
        print("Toggle state:", squid)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Buy Shop Summer", 
    default = true, 
    callback = function(shopsummer)
if shopsummer then
        _G.shopsummer1 = true
	while _G.shopsummer1 == true do
local args = {"Pirate Merchant",4}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Pirate Merchant",5}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
task.wait(60)
 end
		else
		_G.shopsummer1 = false
           end
		 print("Toggle state:", shopsummer)
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Goliath Machine", 
    callback = function()
-- Knit approach: calls the controller methods used in the decompiled code.
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
local KnitLib = require(Knit)

-- Wait until Knit has started and the controller exists
task.spawn(function()
    -- try until controller is ready
    local controller
    while not controller do
        if KnitLib.GetController then
            pcall(function()
                controller = KnitLib.GetController("GoliathController")
            end)
        end
        if not controller then
            task.wait(0.2)
        end
    end

    -- Ensure FrameController exists on the controller (set in KnitInit in your decompiled script)
    while not controller.FrameController do
        task.wait(0.1)
    end

    -- FUNCTIONS you can call:
    local function openGoliath()
        controller.FrameController:Open()
        -- show slot page by default
        controller.SelectionEnabled = false
    end

    local function closeGoliath()
        controller.FrameController:Close()
    end

    local function enableSelection(slotName)
        -- opens the selection view for a particular slot (mimics enableSelection usage)
        controller:enableSelection(slotName)
    end

    -- Example usage:
    openGoliath()
    -- wait 0.5 then enable selection for a slot named "1" (adjust to a real slot name)
    task.delay(0.5, function()
        enableSelection("1")
    end)

    -- if you want to close later:
    -- task.delay(3, closeGoliath)
end)

end})
GUI:CreateButton({
    parent = main, 
    text = "Machine Pristine", 
    callback = function()
--// LocalScript inside StarterPlayerScripts (or executor if testing)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit = require(ReplicatedStorage.Packages.Knit)

-- Wait for Knit to start up fully
task.wait(3)

-- Get controller
local PristineController = Knit.GetController("PristineController")

-- Force open the machine menu
PristineController:UpdatePetList()
PristineController.FrameController:Open()
PristineController:UpdateDisplay()
end})

GUI:CreateButton({
    parent = main, 
    text = "Medal Shop", 
    callback = function()
--// LocalScript inside StarterPlayerScripts (or executor)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit = require(ReplicatedStorage.Packages.Knit)

-- wait for Knit startup
task.wait(3)

-- Get the controller
local MedalMerchantController = Knit.GetController("MedalMerchantController")

-- Force open the Medal Merchant Shop
if MedalMerchantController and MedalMerchantController.FrameController then
    MedalMerchantController.FrameController:Open()
end
end})

GUI:CreateButton({
    parent = main, 
    text = "Forge Machine", 
    callback = function()
-- ⚡ Execution script to open Forge Machine UI
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Knit = require(ReplicatedStorage.Packages.Knit)
local FrameController = require(ReplicatedStorage.Vendor.FrameController)

local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")
local GameUI = PlayerGui:WaitForChild("GameUI")

-- Target: Forge UI
local ForgeUI = GameUI.Menus:WaitForChild("Forge")
local ForgeFrame = FrameController.new(ForgeUI)

-- 🔥 Open the Forge UI instantly
ForgeFrame:Open()
print("⚙️ Forge Machine UI opened successfully!")
end})

GUI:CreateButton({
    parent = main, 
    text = "Rift Machine", 
    callback = function()
--⚡ Force open Rift Machine UI
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Knit = require(ReplicatedStorage.Packages.Knit)
local FrameController = require(ReplicatedStorage.Vendor.FrameController)

local player = Players.LocalPlayer
local RiftUI = player:WaitForChild("PlayerGui"):WaitForChild("GameUI"):WaitForChild("Menus"):WaitForChild("RiftMachine")

-- Create FrameController for Rift UI
local RiftFrame = FrameController.new(RiftUI)

-- Function: open Rift Machine
local function openRiftMachine()
    RiftFrame:Open()
    print("⚙️ Rift Machine UI opened!")
end

-- Function: close Rift Machine
local function closeRiftMachine()
    RiftFrame:Close()
    print("❌ Rift Machine UI closed!")
end

-- Example: auto-open on script run
openRiftMachine()
end})

local main = GUI:CreateTab("Battle", "swords") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Support Battle"
})
GUI:CreateButton({
    parent = main,
    text = "Auto Swing",
    callback = function()
        local ReplicatedStorage = game:GetService("ReplicatedStorage")

        local onClick = ReplicatedStorage.Packages
            .Knit.Services.ToolService.RE
            .onClick

        -- Toggle system
        local enabled = not _G.AutoSwingEnabled
        _G.AutoSwingEnabled = enabled

        if enabled then
            print("⚡ Auto Swing ON")
            task.spawn(function()
                while _G.AutoSwingEnabled do
                    onClick:FireServer()
                    task.wait() -- tiny delay to avoid freezing
                end
            end)
        else
            print("🛑 Auto Swing OFF")
        end
    end
})

GUI:CreateButton({
    parent = main, 
    text = "Auto  Rebirth and superRebirth", 
    callback = function()
--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
local ToolService = Knit.Services:WaitForChild("ToolService")
local ZoneService = Knit.Services:WaitForChild("ZoneService")
local ArmWrestleService = Knit.Services:WaitForChild("ArmWrestleService")
local RebirthService = Knit.Services:WaitForChild("RebirthService")

local RE = ToolService:WaitForChild("RE")
local player = Players.LocalPlayer

--// Config
local bicepsThreshold = 2.7399858925901514e+26

local fightPlan = {
    {1, "Spawn", "Champion", 1},
    {2, "Spawn", "RogueAi", 1},
    {3, "Spawn", "KrakenBoss", 2},
    {4, "Spawn", "MutantKing", 2},
    {5, "Spawn", "Mammoth", 3},
    {6, "Spawn", "Udzal", 3},
    {7, "Spawn", "SpaceDog", 4},
    {8, "Spawn", "UndeadSparta", 4},
    {9, "Spawn", "EvilOverseer", 5},
    {10, "Spawn", "BruteHunter", 16},
    {11, "Spawn", "Glaciator", 20},
    {12, "Spawn", "MrLizard", 25},
}

--// State
local autoFarmEnabled = false
local critSpamEnabled = false
local autoEquipEnabled = true
local fighting, rebirthing, stopFight, waitingForBiceps = false, false, false, false
local status = "IDLE..."
local equipped = false
local lastEquipAttempt = 0
local equipRetryDelay = 2

--// GUI
local gui = Instance.new("ScreenGui", LocalPlayer.PlayerGui)
gui.Name = "dark_auto_gui"
gui.ResetOnSpawn = false

local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0, 220, 0, 200) -- increased to fit status lower
frame.Position = UDim2.new(0.35, 0, 0.2, 0)
frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
frame.Active = true
frame.Draggable = true

local title = Instance.new("TextLabel", frame)
title.Size = UDim2.new(1, -40, 0, 25)
title.Position = UDim2.new(0, 5, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Auto Rebirth Bot"
title.TextColor3 = Color3.fromRGB(255,255,255)
title.Font = Enum.Font.Code
title.TextSize = 14
title.TextXAlignment = Enum.TextXAlignment.Left

-- Minimize
local minBtn = Instance.new("TextButton", frame)
minBtn.Size = UDim2.new(0,20,0,20)
minBtn.Position = UDim2.new(1,-40,0,2)
minBtn.BackgroundTransparency = 1
minBtn.Text = "-"
minBtn.TextColor3 = Color3.fromRGB(200,200,200)
minBtn.Font = Enum.Font.Code
minBtn.TextSize = 14

-- Destroy
local closeBtn = Instance.new("TextButton", frame)
closeBtn.Size = UDim2.new(0,20,0,20)
closeBtn.Position = UDim2.new(1,-20,0,2)
closeBtn.BackgroundTransparency = 1
closeBtn.Text = "x"
closeBtn.TextColor3 = Color3.fromRGB(200,100,100)
closeBtn.Font = Enum.Font.Code
closeBtn.TextSize = 14

-- Body
local body = Instance.new("Frame", frame)
body.Size = UDim2.new(1,0,0,175)
body.Position = UDim2.new(0,0,0,25)
body.BackgroundTransparency = 1

-- AutoFarm toggle
local FarmButton = Instance.new("TextButton", body)
FarmButton.Size = UDim2.new(1,-20,0,30)
FarmButton.Position = UDim2.new(0,10,0,10)
FarmButton.Text = "autofarm: off"
FarmButton.BackgroundColor3 = Color3.fromRGB(200,50,50)
FarmButton.TextColor3 = Color3.fromRGB(255,255,255)
FarmButton.Font = Enum.Font.Code
FarmButton.TextSize = 14

-- CritSpam toggle
local CritButton = Instance.new("TextButton", body)
CritButton.Size = UDim2.new(1,-20,0,30)
CritButton.Position = UDim2.new(0,10,0,45)
CritButton.Text = "critspam: off"
CritButton.BackgroundColor3 = Color3.fromRGB(200,50,50)
CritButton.TextColor3 = Color3.fromRGB(255,255,255)
CritButton.Font = Enum.Font.Code
CritButton.TextSize = 14

-- AutoEquip toggle
local EquipButton = Instance.new("TextButton", body)
EquipButton.Size = UDim2.new(1,-20,0,30)
EquipButton.Position = UDim2.new(0,10,0,80)
EquipButton.Text = "autoequip: on"
EquipButton.BackgroundColor3 = Color3.fromRGB(50,200,50)
EquipButton.TextColor3 = Color3.fromRGB(255,255,255)
EquipButton.Font = Enum.Font.Code
EquipButton.TextSize = 14

-- Status (Centered, Bigger, White, Lower)
local StatusLabel = Instance.new("TextLabel", body)
StatusLabel.Size = UDim2.new(1,-20,0,40)       -- taller
StatusLabel.Position = UDim2.new(0,10,0,135)   -- pushed lower inside body (fits exactly)
StatusLabel.Text = "STATUS: IDLE..."
StatusLabel.BackgroundTransparency = 1
StatusLabel.TextColor3 = Color3.fromRGB(255,255,255) -- WHITE
StatusLabel.Font = Enum.Font.SourceSansBold
StatusLabel.TextSize = 22 -- bigger
StatusLabel.TextXAlignment = Enum.TextXAlignment.Center
StatusLabel.TextYAlignment = Enum.TextYAlignment.Center

-- Buttons logic
FarmButton.MouseButton1Click:Connect(function()
    autoFarmEnabled = not autoFarmEnabled
    FarmButton.Text = "autofarm: " .. (autoFarmEnabled and "on" or "off")
    FarmButton.BackgroundColor3 = autoFarmEnabled and Color3.fromRGB(50,200,50) or Color3.fromRGB(200,50,50)
end)

CritButton.MouseButton1Click:Connect(function()
    critSpamEnabled = not critSpamEnabled
    CritButton.Text = "critspam: " .. (critSpamEnabled and "on" or "off")
    CritButton.BackgroundColor3 = critSpamEnabled and Color3.fromRGB(50,200,50) or Color3.fromRGB(200,50,50)
end)

EquipButton.MouseButton1Click:Connect(function()
    autoEquipEnabled = not autoEquipEnabled
    EquipButton.Text = "autoequip: " .. (autoEquipEnabled and "on" or "off")
    EquipButton.BackgroundColor3 = autoEquipEnabled and Color3.fromRGB(50,200,50) or Color3.fromRGB(200,50,50)
end)

minBtn.MouseButton1Click:Connect(function()
    body.Visible = not body.Visible
    if body.Visible then
        frame.Size = UDim2.new(0,220,0,200)
    else
        frame.Size = UDim2.new(0,220,0,25)
    end
end)

closeBtn.MouseButton1Click:Connect(function()
    gui:Destroy()
end)

-- Update status (always CAPS)
local function updateStatus(txt)
    status = txt
    StatusLabel.Text = "STATUS: " .. string.upper(tostring(txt))
end

--// Functions
local function getEquipArgs()
    if player:FindFirstChild("Zone") and player.Zone.Value == 1 then
        return {"1","Dumbells","250Kg"}
    end
    return {"21","Dumbells","ThePyramids12"}
end

local function tryEquip()
    local args = getEquipArgs()
    pcall(function() RE.onEquipRequest:FireServer(unpack(args)) end)
end

local function ensureEquipped()
    if not autoEquipEnabled then return end
    local now = tick()
    if now - lastEquipAttempt >= equipRetryDelay then
        lastEquipAttempt = now
        tryEquip()
    end
end

local function teleportAndFight(zoneNumber, spawnName, enemyName, fightCount)
    if stopFight or not autoFarmEnabled then return end
    updateStatus("TELEPORTING Z"..zoneNumber)

    ZoneService.RE.teleport:FireServer(workspace.Zones[tostring(zoneNumber)].Interactables.Teleports.Locations[spawnName])
    task.wait(1)

    ArmWrestleService.RF.SetAuto:InvokeServer(true)
    for i = 1, fightCount do
        if stopFight or not autoFarmEnabled then break end
        updateStatus("FIGHTING "..string.upper(tostring(enemyName)))
        local success = pcall(function()
            return ArmWrestleService.RF.RequestStartFight:InvokeServer(enemyName)
        end)
        task.wait(success and 1 or 0.5)
    end
    ArmWrestleService.RF.SetAuto:InvokeServer(false)
end

local function fightAllZones()
    fighting = true
    for _, plan in ipairs(fightPlan) do
        if stopFight or not autoFarmEnabled then break end
        teleportAndFight(plan[1], plan[2], plan[3], plan[4])
    end
    fighting = false
end

local function rebirthCycle()
    rebirthing = true
    stopFight = true
    updateStatus("REBIRTHING...")

    local rebirthRE = RebirthService:WaitForChild("RE")
    local onRebirth = rebirthRE:WaitForChild("onRebirthRequest")
    local onSuperRebirth = rebirthRE:WaitForChild("onSuperRebirth")

    for i = 1, 100 do
        onRebirth:FireServer()
    end
    onSuperRebirth:FireServer()

    updateStatus("WAITING BICEPS...")
    waitingForBiceps = true
    stopFight, rebirthing = false, false
end

-- Heartbeat loop
RunService.Heartbeat:Connect(function()
    ensureEquipped()
    if autoFarmEnabled then
        RE.onClick:FireServer()
    end
    if critSpamEnabled then
        ArmWrestleService.RF.RequestCritHit:InvokeServer()
        ArmWrestleService.RF.RequestClick:InvokeServer()
    end
end)

-- Main cycle
task.spawn(function()
    while true do
        if autoFarmEnabled and not fighting and not rebirthing then
            if waitingForBiceps then
                if player.leaderstats and player.leaderstats.Biceps and player.leaderstats.Biceps.Value > bicepsThreshold then
                    waitingForBiceps = false
                    fightAllZones()
                    rebirthCycle()
                end
            else
                fightAllZones()
                rebirthCycle()
            end
        end
        if not autoFarmEnabled and not critSpamEnabled then
            updateStatus("IDLE...")
        end
        task.wait(1)
    end
end)
end})
GUI:CreateButton({
    parent = main, 
    text = "Auto Battle Bot", 
    callback = function()
-- ⚡ AutoFight + CritSpam + HitSpam Modern GUI
-- Features: Draggable, Minimize/Unminimize, X Close

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

-- Knit
local Knit = require(ReplicatedStorage.Packages.Knit)
local ArmWrestleService = Knit.GetService("ArmWrestleService")
local ArmWrestleController = Knit.GetController("ArmWrestleController")

-- RF references
local CritRF = ReplicatedStorage.Packages.Knit.Services.ArmWrestleService.RF.RequestCritHit
local ClickRF = ReplicatedStorage.Packages.Knit.Services.ArmWrestleService.RF.RequestClick

-- States
local AutoFight, CritSpam, HitSpam = false, false, false
local npcName = "ToyBananaMonkey"
local fightLoop, critLoop, hitLoop

-- GUI
local gui = Instance.new("ScreenGui")
gui.Name = "ModernAutoFightGui"
gui.Parent = player:WaitForChild("PlayerGui")
gui.ResetOnSpawn = false

-- Main Frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 220)
frame.Position = UDim2.new(0.5, -150, 0.25, -110)
frame.BackgroundColor3 = Color3.fromRGB(25,25,25)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true
frame.Parent = gui

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0,12)
UICorner.Parent = frame

-- TitleBar
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1,0,0,35)
titleBar.BackgroundColor3 = Color3.fromRGB(45,45,45)
titleBar.BorderSizePixel = 0
titleBar.Parent = frame
local titleCorner = Instance.new("UICorner", titleBar)
titleCorner.CornerRadius = UDim.new(0,12)

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1,-70,1,0)
title.Position = UDim2.new(0,10,0,0)
title.BackgroundTransparency = 1
title.Text = "⚡ Auto Fight Bot"
title.Font = Enum.Font.GothamBold
title.TextSize = 16
title.TextColor3 = Color3.fromRGB(255,255,255)
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = titleBar

-- Close Button
local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0,35,1,0)
closeBtn.Position = UDim2.new(1,-35,0,0)
closeBtn.BackgroundColor3 = Color3.fromRGB(180,50,50)
closeBtn.Text = "X"
closeBtn.Font = Enum.Font.GothamBold
closeBtn.TextSize = 16
closeBtn.TextColor3 = Color3.fromRGB(255,255,255)
closeBtn.Parent = titleBar
Instance.new("UICorner", closeBtn)

-- Minimize Button
local miniBtn = Instance.new("TextButton")
miniBtn.Size = UDim2.new(0,35,1,0)
miniBtn.Position = UDim2.new(1,-70,0,0)
miniBtn.BackgroundColor3 = Color3.fromRGB(70,120,200)
miniBtn.Text = "-"
miniBtn.Font = Enum.Font.GothamBold
miniBtn.TextSize = 16
miniBtn.TextColor3 = Color3.fromRGB(255,255,255)
miniBtn.Parent = titleBar
Instance.new("UICorner", miniBtn)

-- Content Frame
local content = Instance.new("Frame")
content.Size = UDim2.new(1,-20,1,-45)
content.Position = UDim2.new(0,10,0,40)
content.BackgroundTransparency = 1
content.Parent = frame

-- NPC Input
local inputBox = Instance.new("TextBox")
inputBox.Size = UDim2.new(1,0,0,35)
inputBox.BackgroundColor3 = Color3.fromRGB(40,40,40)
inputBox.PlaceholderText = "Enter NPC name..."
inputBox.Text = npcName
inputBox.Font = Enum.Font.Gotham
inputBox.TextSize = 16
inputBox.TextColor3 = Color3.fromRGB(255,255,255)
inputBox.Parent = content
Instance.new("UICorner", inputBox)

-- Button Factory
local function CreateButton(text, posY)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1,0,0,40)
    btn.Position = UDim2.new(0,0,0,posY)
    btn.BackgroundColor3 = Color3.fromRGB(70,0,0)
    btn.Text = text
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 16
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    Instance.new("UICorner", btn)
    btn.Parent = content
    return btn
end

local fightBtn = CreateButton("Start AutoFight Loop", 45)
local critBtn = CreateButton("Start Crit Spam", 90)
local hitBtn = CreateButton("Start Hit Spam", 135)

-- Logic
local function StartFightLoop()
    if AutoFight then return end
    AutoFight = true
    fightBtn.Text = "Stop AutoFight Loop"
    fightBtn.BackgroundColor3 = Color3.fromRGB(0,120,0)

    npcName = inputBox.Text ~= "" and inputBox.Text or npcName
    fightLoop = task.spawn(function()
        while AutoFight do
            ArmWrestleController.RequestStartFight(npcName)
            ArmWrestleService:SetAuto(true)
            repeat task.wait(0.1) until not ArmWrestleController.Fighting or not AutoFight
            ArmWrestleService:SetAuto(false)
            task.wait(0.2)
        end
    end)
end
local function StopFightLoop()
    AutoFight = false
    fightBtn.Text = "Start AutoFight Loop"
    fightBtn.BackgroundColor3 = Color3.fromRGB(70,0,0)
end

local function StartCritSpam()
    if CritSpam then return end
    CritSpam = true
    critBtn.Text = "Stop Crit Spam"
    critBtn.BackgroundColor3 = Color3.fromRGB(0,120,0)

    critLoop = task.spawn(function()
        while CritSpam do
            for i = 1,5 do CritRF:InvokeServer() end
            task.wait()
        end
    end)
end
local function StopCritSpam()
    CritSpam = false
    critBtn.Text = "Start Crit Spam"
    critBtn.BackgroundColor3 = Color3.fromRGB(70,0,0)
end

local function StartHitSpam()
    if HitSpam then return end
    HitSpam = true
    hitBtn.Text = "Stop Hit Spam"
    hitBtn.BackgroundColor3 = Color3.fromRGB(0,120,0)

    hitLoop = task.spawn(function()
        while HitSpam do
            for i = 1,5 do ClickRF:InvokeServer() end
            task.wait()
        end
    end)
end
local function StopHitSpam()
    HitSpam = false
    hitBtn.Text = "Start Hit Spam"
    hitBtn.BackgroundColor3 = Color3.fromRGB(70,0,0)
end

-- Connections
fightBtn.MouseButton1Click:Connect(function()
    if AutoFight then StopFightLoop() else StartFightLoop() end
end)
critBtn.MouseButton1Click:Connect(function()
    if CritSpam then StopCritSpam() else StartCritSpam() end
end)
hitBtn.MouseButton1Click:Connect(function()
    if HitSpam then StopHitSpam() else StartHitSpam() end
end)

closeBtn.MouseButton1Click:Connect(function()
    StopFightLoop(); StopCritSpam(); StopHitSpam()
    gui:Destroy()
end)

-- Minimize/Unminimize
local minimized = false

local miniFrame = Instance.new("TextButton")
miniFrame.Size = UDim2.new(0,180,0,35)
miniFrame.Position = UDim2.new(0,10,1,-50)
miniFrame.BackgroundColor3 = Color3.fromRGB(45,45,45)
miniFrame.Text = "⚡ AutoFight"
miniFrame.TextColor3 = Color3.fromRGB(255,255,255)
miniFrame.Font = Enum.Font.GothamBold
miniFrame.TextSize = 14
miniFrame.Visible = false
miniFrame.Active = true
miniFrame.Draggable = true
Instance.new("UICorner", miniFrame)
miniFrame.Parent = gui

miniBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    frame.Visible = not minimized
    miniFrame.Visible = minimized
end)

miniFrame.MouseButton1Click:Connect(function()
    minimized = false
    frame.Visible = true
    miniFrame.Visible = false
end)
end})
GUI:CreateButton({
    parent = main, 
    text = "Auto Tower Bot", 
    callback = function()
-- ⚡ Auto Tower Loop + Spam Click with Modern GUI (Minimize / Unminimize)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- Knit services
local Knit = require(ReplicatedStorage.Packages.Knit)
local ArmWrestleService = Knit.GetService("ArmWrestleService")
local ArmWrestleController = Knit.GetController("ArmWrestleController")

-- TowerService
local TowerService = ReplicatedStorage:WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("TowerService")
    :WaitForChild("RF")
    :WaitForChild("EnterTower")

-- State
local AutoTower = false
local towerName = "MiningTower"
local loopTask
local clickSpam
local Minimized = false

-- GUI
local gui = Instance.new("ScreenGui")
gui.Name = "AutoTowerLoopGui"
gui.Parent = player:WaitForChild("PlayerGui")
gui.ResetOnSpawn = false

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 260, 0, 160)
frame.Position = UDim2.new(0.35, 0, 0.25, 0)
frame.BackgroundColor3 = Color3.fromRGB(25,25,25)
frame.Active = true
frame.Draggable = true
frame.Parent = gui
Instance.new("UICorner", frame).CornerRadius = UDim.new(0,10)

-- Title bar
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1,0,0,35)
titleBar.BackgroundColor3 = Color3.fromRGB(45,45,45)
titleBar.Parent = frame
Instance.new("UICorner", titleBar).CornerRadius = UDim.new(0,10)

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1,-60,1,0)
title.Position = UDim2.new(0,10,0,0)
title.BackgroundTransparency = 1
title.TextColor3 = Color3.fromRGB(255,255,255)
title.Text = "⚡ Auto Tower + Spam Click"
title.Font = Enum.Font.GothamBold
title.TextSize = 18
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = titleBar

-- Minimize button
local minimizeBtn = Instance.new("TextButton")
minimizeBtn.Size = UDim2.new(0,30,0,30)
minimizeBtn.Position = UDim2.new(1,-60,0,3)
minimizeBtn.BackgroundColor3 = Color3.fromRGB(90,90,90)
minimizeBtn.Text = "-"
minimizeBtn.TextColor3 = Color3.fromRGB(255,255,255)
minimizeBtn.Font = Enum.Font.GothamBold
minimizeBtn.TextSize = 20
minimizeBtn.Parent = titleBar
Instance.new("UICorner", minimizeBtn).CornerRadius = UDim.new(0,6)

-- Close button
local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0,30,0,30)
closeBtn.Position = UDim2.new(1,-30,0,3)
closeBtn.BackgroundColor3 = Color3.fromRGB(150,0,0)
closeBtn.Text = "X"
closeBtn.TextColor3 = Color3.fromRGB(255,255,255)
closeBtn.Font = Enum.Font.GothamBold
closeBtn.TextSize = 18
closeBtn.Parent = titleBar
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0,6)

-- Input box
local inputBox = Instance.new("TextBox")
inputBox.Size = UDim2.new(1,-20,0,30)
inputBox.Position = UDim2.new(0,10,0,50)
inputBox.BackgroundColor3 = Color3.fromRGB(40,40,40)
inputBox.TextColor3 = Color3.fromRGB(255,255,255)
inputBox.PlaceholderText = "Enter Tower name..."
inputBox.Text = towerName
inputBox.Font = Enum.Font.Gotham
inputBox.TextSize = 16
inputBox.Parent = frame
Instance.new("UICorner", inputBox).CornerRadius = UDim.new(0,6)

-- Start/Stop button
local button = Instance.new("TextButton")
button.Size = UDim2.new(1,-20,0,35)
button.Position = UDim2.new(0,10,0,95)
button.BackgroundColor3 = Color3.fromRGB(80,0,0)
button.TextColor3 = Color3.fromRGB(255,255,255)
button.Text = "Start Loop"
button.Font = Enum.Font.GothamBold
button.TextSize = 18
button.Parent = frame
Instance.new("UICorner", button).CornerRadius = UDim.new(0,8)

-- Functions
local function StartLoop()
    if AutoTower then return end
    AutoTower = true
    button.Text = "Stop Loop"
    button.BackgroundColor3 = Color3.fromRGB(0,120,0)

    towerName = inputBox.Text ~= "" and inputBox.Text or towerName

    loopTask = task.spawn(function()
        while AutoTower do
            local args = {towerName, false}
            TowerService:InvokeServer(unpack(args))

            clickSpam = RunService.Heartbeat:Connect(function()
                ArmWrestleController.MouseClick(Enum.UserInputType.MouseButton1, false)
            end)

            task.wait(15) -- adjust duration
            if clickSpam then
                clickSpam:Disconnect()
                clickSpam = nil
            end
            task.wait(1)
        end
    end)
end

local function StopLoop()
    if not AutoTower then return end
    AutoTower = false
    button.Text = "Start Loop"
    button.BackgroundColor3 = Color3.fromRGB(80,0,0)
    if clickSpam then
        clickSpam:Disconnect()
        clickSpam = nil
    end
end

-- Button toggle
button.MouseButton1Click:Connect(function()
    if AutoTower then
        StopLoop()
    else
        StartLoop()
    end
end)

-- Close button
closeBtn.MouseButton1Click:Connect(function()
    StopLoop()
    gui:Destroy()
end)

-- Minimize / Unminimize
minimizeBtn.MouseButton1Click:Connect(function()
    Minimized = not Minimized
    if Minimized then
        for _, child in ipairs(frame:GetChildren()) do
            if child ~= titleBar then
                child.Visible = false
            end
        end
        frame.Size = UDim2.new(0,200,0,35)
        minimizeBtn.Text = "+"
    else
        for _, child in ipairs(frame:GetChildren()) do
            child.Visible = true
        end
        frame.Size = UDim2.new(0,260,0,160)
        minimizeBtn.Text = "-"
    end
end)
end})
local main = GUI:CreateTab("Misc", "circle-ellipsis") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Option"
})
GUI:CreateButton({
    parent = main, 
    text = "Auto CLick", 
    callback = function()
getgenv().key = "Hostile"
loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/The-telligence/main/MC%20KSystem%202"))()
end})

GUI:CreateButton({
    parent = main, 
    text = "Lds hub", 
    callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/SenhorLDS/ProjectLDSHUB/refs/heads/main/Loader%20LDS%20HUB'))()
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Lds Mutate", 
    callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/yadielsantoss/full-script/refs/heads/main/MUTATE%20aws'))()
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Use Mining Cereal", 
    callback = function()
-- List of items and their values
local x = 0
while x < 3500 do
    print("x is:", x)
    x = x + 1
    task.wait() -- Important for preventing crashes in infinite loops
	local args = {
	"Gemstone Cereal",
	"1"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemService"):WaitForChild("RF"):WaitForChild("UseItem"):InvokeServer(unpack(args))

end
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Use Raspberry", 
    callback = function()
-- List of items and their values
local x = 0
while x < 2500 do
    print("x is:", x)
    x = x + 1
    task.wait() -- Important for preventing crashes in infinite loops
	local args = {
	"Raspberry",
	"2"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemService"):WaitForChild("RF"):WaitForChild("UseItem"):InvokeServer(unpack(args))

end
    end
})

GUI:CreateButton({
    parent = main, 
    text = "Use Item", 
    callback = function()
-- List of items and their values
local items = {
    {"Cookie", "3"},
    {"Donut", "3"},
    {"Banana", "2"},
    {"Dragon Fruit", "3"},
    {"Starfruit", "3"}
}

-- Reference to UseItem RemoteFunction
local useItem = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("ItemService")
    :WaitForChild("RF")
    :WaitForChild("UseItem")

-- Loop through all items, and use each one 25 times
for _, args in ipairs(items) do
    for i = 1, 25 do
        useItem:InvokeServer(unpack(args))
        task.wait(0.1) -- delay for stability
    end
end

    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Anti AFK", 
    default = true, 
    callback = function()
local VirtualUser = game:GetService('VirtualUser')
game:GetService('Players').LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Anti AFK loaded!",
    Text = "Made by Tuuguu936",
    Button1 = "Okay",
    Duration = 5
})
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Buy Medal", 
    callback = function()
local buyMedal = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("MedalMerchantService")
    :WaitForChild("RF")
    :WaitForChild("Buy")

buyMedal:InvokeServer("Rune Medal")
buyMedal:InvokeServer("Firework Medal")
buyMedal:InvokeServer("Feel Good Medal")
buyMedal:InvokeServer("Easter Medal")
buyMedal:InvokeServer("Soulfire Medal")
buyMedal:InvokeServer("Godly Medal")
buyMedal:InvokeServer("Thunder Medal")
buyMedal:InvokeServer("Bulk Medal")
buyMedal:InvokeServer("Temple Medal")
buyMedal:InvokeServer("Curler 3")
buyMedal:InvokeServer("Villain Medal")
buyMedal:InvokeServer("Captain Medal")
buyMedal:InvokeServer("Beach Medal")
buyMedal:InvokeServer("Trident Medal")
buyMedal:InvokeServer("Yin Yang Medal")
buyMedal:InvokeServer("Bandit Medal")
buyMedal:InvokeServer("Holly Medal")
buyMedal:InvokeServer("Volcano Medal")
buyMedal:InvokeServer("Spooky Medal")
buyMedal:InvokeServer("Endless Grips 1")
buyMedal:InvokeServer("Hallo Medal")
buyMedal:InvokeServer("Ninja Medal")
buyMedal:InvokeServer("Snowman Medal")
buyMedal:InvokeServer("Intruder Medal")
buyMedal:InvokeServer("Criminal Medal")
buyMedal:InvokeServer("Endless Summer 1")
buyMedal:InvokeServer("Prisoner Medal")
buyMedal:InvokeServer("Twilight Medal")
buyMedal:InvokeServer("Hacker Medal")
buyMedal:InvokeServer("Noob Medal")
buyMedal:InvokeServer("Haunted Medal")
buyMedal:InvokeServer("Fire Medal")
buyMedal:InvokeServer("Athlete Medal")
buyMedal:InvokeServer("Skull Medal")
buyMedal:InvokeServer("Gripper 3")
buyMedal:InvokeServer("Boombox Medal")
buyMedal:InvokeServer("Lucky 1 Medal")
buyMedal:InvokeServer("Guard Medal")
end
})
GUI:CreateButton({
    parent = main, 
    text = "Reedem Gamepass", 
    callback = function()
	local claim = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("SeasonPassService")
    :WaitForChild("RF")
    :WaitForChild("Claim")

claim:InvokeServer("Regular",1)
claim:InvokeServer("Regular",2)
claim:InvokeServer("Regular",3)
claim:InvokeServer("Regular",4)
claim:InvokeServer("Regular",5)
claim:InvokeServer("Regular",6)
claim:InvokeServer("Regular",7)
claim:InvokeServer("Regular",8)
claim:InvokeServer("Regular",9)
claim:InvokeServer("Regular",10)
claim:InvokeServer("Regular",11)
claim:InvokeServer("Regular",12)
claim:InvokeServer("Regular",13)
claim:InvokeServer("Regular",14)
claim:InvokeServer("Regular",15)
claim:InvokeServer("Regular",16)
claim:InvokeServer("Regular",17)
claim:InvokeServer("Regular",18)
claim:InvokeServer("Regular",19)
claim:InvokeServer("Regular",20)
claim:InvokeServer("Regular",21)
claim:InvokeServer("Regular",22)
claim:InvokeServer("Regular",23)
claim:InvokeServer("Regular",24)
claim:InvokeServer("Regular",25)
claim:InvokeServer("Regular",26)
claim:InvokeServer("Regular",27)
claim:InvokeServer("Regular",28)
claim:InvokeServer("Regular",29)
claim:InvokeServer("Regular",30)

end
})
GUI:CreateButton({
    parent = main, 
    text = "Reedem Code", 
    callback = function()
local redeem = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("CodeRedemptionService")
    :WaitForChild("RE")
    :WaitForChild("onRedeem")

redeem:FireServer("banker")
redeem:FireServer("sorryoops")
redeem:FireServer("timetravel")
redeem:FireServer("world19")
redeem:FireServer("bulk")
redeem:FireServer("superhero")
redeem:FireServer("tokenstore")
redeem:FireServer("captain")
redeem:FireServer("skullbeard")
redeem:FireServer("pirate")
redeem:FireServer("athlete")
redeem:FireServer("tradingback")
redeem:FireServer("blossom")
redeem:FireServer("ninja")
redeem:FireServer("snowops")
redeem:FireServer("hideout")
redeem:FireServer("cosmic")
redeem:FireServer("stocking")
redeem:FireServer("frostlands")
redeem:FireServer("polar")
redeem:FireServer("shiny")
redeem:FireServer("Christmas")
redeem:FireServer("hacker")
redeem:FireServer("classic")
redeem:FireServer("clans")
redeem:FireServer("rifted")
redeem:FireServer("hauntedmanor")
redeem:FireServer("trainers")
redeem:FireServer("ghosthunting")
redeem:FireServer("spooky")
redeem:FireServer("soon")
redeem:FireServer("hatching")
redeem:FireServer("billion")
redeem:FireServer("Heavenly")
redeem:FireServer("rework")
redeem:FireServer("paradise")
redeem:FireServer("wasteland")
redeem:FireServer("apocalypse")
redeem:FireServer("energy")
redeem:FireServer("royalty")
redeem:FireServer("performance")
redeem:FireServer("charms")
redeem:FireServer("wizard")
redeem:FireServer("atlantis")
redeem:FireServer("800mvisits")
redeem:FireServer("icecold")
redeem:FireServer("forging")
redeem:FireServer("noob")
redeem:FireServer("fixingstuff")
redeem:FireServer("celebration")
redeem:FireServer("glassbridge")
redeem:FireServer("octogames")
redeem:FireServer("brainrot")
redeem:FireServer("21iscoming")
redeem:FireServer("welovemining")
redeem:FireServer("sorryfordelay")

end})

local main = GUI:CreateTab("New Event", "squircle") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Option"
})
GUI:CreateToggle({
    parent = main, 
    text = "Equip Mining", 
    default = false, 
    callback = function(duck)
if duck then
local toolService = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("ToolService")
    :WaitForChild("RE")
    :WaitForChild("onGuiEquipRequest")

    _G.loop7 = true
	while _G.loop7 == true do
    -- Equip Dumbells
    toolService:FireServer("PlayfulMines", "Dumbells", "PlayfulMines12")
    task.wait(60) -- wait 1 minute

    -- Equip Grips
    toolService:FireServer("PlayfulMines", "Grips", "PlayfulMines12")
    task.wait(60) -- wait 1 minute
end
		else
		_G.loop7 = false
           end
        print("Toggle state:", duck)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Equip Knuckle", 
    default = false, 
    callback = function(knuckle)
if knuckle then
        _G.knuckle1 = true
	while _G.knuckle1 == true do
task.wait()
local args = {
	"DesertMines",
	"Tier5"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("PunchBagService"):WaitForChild("RE"):WaitForChild("onGiveStats"):FireServer(unpack(args))
local args = {
	"DesertMines",
	"Tier5"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("PunchBagService"):WaitForChild("RE"):WaitForChild("onGiveStats"):FireServer(unpack(args))

 end
		else
		_G.knuckle1 = false
           end
        print("Toggle state:", knuckle)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Mining Tower", 
    default = false, 
    callback = function(trialmining)
if trialmining then
        _G.trialmining1 = true
			while _G.trialmining1 == true do
task.wait()			
local args = {
	true
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RF"):WaitForChild("SetAuto"):InvokeServer(unpack(args))
local args = {
	"MiningTower",
	true
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TowerService"):WaitForChild("RF"):WaitForChild("EnterTower"):InvokeServer(unpack(args))
end
		else
		_G.trialmining1 = false
        end
		print("Toggle state:", trialmining)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Trial Ice Lake", 
    default = false, 
    callback = function(Trialice)
if Trialice then
        _G.Trialice1 = true
			while _G.Trialice1 == true do
task.wait()			
local args = {"Icy"}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChampionshipService"):WaitForChild("RF"):WaitForChild("RequestJoin"):InvokeServer(unpack(args))
end
		else
		_G.Trialice1 = false
        end
		print("Toggle state:", Trialice)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Trial 13", 
    default = false, 
    callback = function(losttower)
if losttower then
        _G.losttower1 = true
	while _G.losttower1 == true do
task.wait(0.1)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChampionshipService"):WaitForChild("RF"):WaitForChild("RequestJoin"):InvokeServer("Medieval")
end
	  		else
		      _G.losttower1 = false
            end
print("Toggle state:", losttower)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Space Center", 
    default = false, 
    callback = function(stage)
if stage then
        _G.stage1 = true
	while _G.stage1 == true do
task.wait()
local args = {
	"SpaceTower",
	true
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TowerService"):WaitForChild("RF"):WaitForChild("EnterTower"):InvokeServer(unpack(args))

end
	  		else
		      _G.stage1 = false
            end
print("Toggle state:", stage)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Mining Tower", 
    default = false, 
    callback = function(mining)
if mining then
        _G.mining1 = true
	while _G.mining1 == true do
task.wait()
local args = {
	"MiningTower",
	true
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TowerService"):WaitForChild("RF"):WaitForChild("EnterTower"):InvokeServer(unpack(args))

end
	  		else
		      _G.mining1 = false
            end
print("Toggle state:", mining)
    end
})

local main = GUI:CreateTab("misc", "cake") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Shortcut"
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Daily Login", 
    default = true, 
    callback = function(dailylogin)
if dailylogin then
        _G.dailylogin1 = true
			while _G.dailylogin1 == true do
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("DailyRewardService"):WaitForChild("RE"):WaitForChild("onClaimReward"):FireServer()
task.wait(20)
                        end
		else
		_G.dailylogin1 = false
        end
		print("Toggle state:", dailylogin)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Spin Tralalero", 
    default = false, 
    callback = function(Spinfrontman)
if Spinfrontman then
        _G.Spinfrontman1 = true
	while _G.Spinfrontman1 == true do
		task.wait()
local args = {
	"Tralalero Fortune",
	"x25"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))
end
		else
		_G.Spinfrontman1 = false
           end
        print("Toggle state:", Spinfrontman)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Spin Space", 
    default = false, 
    callback = function(Space)
if Space then
        _G.Space1 = true
	while _G.Space1 == true do
		task.wait()
local args = {
	"Space Fortune",
	"x25"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))
end
		else
		_G.Space1 = false
           end
        print("Toggle state:", Space)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Spin Miner Fortune", 
    default = false, 
    callback = function(minerfortune)
if minerfortune then
        _G.minerfortune1 = true
	while _G.minerfortune1 == true do
		task.wait()
local args = {
	"Miners Fortune",
	"x25"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))
end
		else
		_G.minerfortune1 = false
           end
        print("Toggle state:", minerfortune)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Open Trainer", 
    default = true, 
    callback = function(trainer)
if trainer then
        _G.loop4 = true
	while _G.loop4 == true do
		task.wait(3)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Starter Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Gold Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Mythic Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Premium Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Prism Crate")
end
		else
		_G.loop4 = false
           end
		print("Toggle state:", trainer)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Open Kingdom Chest", 
    default = false, 
    callback = function(Kingdom)
if Kingdom then
        _G.loop33 = true
	while _G.loop33 == true do
		task.wait(0.1)
local args = {"KingdomChest"}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChestService"):WaitForChild("RF"):WaitForChild("Open"):InvokeServer(unpack(args))
           end
		else
		_G.loop33 = false
           end
		print("Toggle state:", Kingdom)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Open Ice Chest", 
    default = false, 
    callback = function(ice)
if ice then
        _G.ice1 = true
	while _G.ice1 == true do
		task.wait(0.1)
local args = {
	"IcyChest"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChestService"):WaitForChild("RF"):WaitForChild("Open"):InvokeServer(unpack(args))
           end
		else
		_G.ice1 = false
           end
		print("Toggle state:", ice)
    end
})

GUI:CreateToggle({
    parent = main, 
    text = "Auto Upgrade Snack", 
    default = false, 
    callback = function(upgrade)
if upgrade then
        _G.upgrade1 = true
	while _G.upgrade1 == true do
task.wait()
local args = {{Item = "Raspberry",Tier = 1}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Cookie",Tier = 1}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Cookie",Tier = 2}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Dragon Fruit",Tier = 1}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Dragon Fruit",Tier = 2}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Donut",Tier = 1}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Donut",Tier = 2}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Starfruit",Tier = 1}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Starfruit",Tier = 2}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
end
		else
		_G.upgrade1 = false
           end
        print("Toggle state:", upgrade)
    end
})

local main = GUI:CreateTab("misc", "egg") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Egg Hatch"
})
GUI:CreateButton({
    parent = main, 
    text = "ato Hatch Egg", 
    callback = function()
--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer

--// Variables
local loopRunning = false

--// GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "EggGui"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.CoreGui

-- Main Frame
local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 280, 0, 160)
Frame.Position = UDim2.new(0.35, 0, 0.35, 0)
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
Frame.Active = true
Frame.Draggable = true
Frame.Parent = ScreenGui

-- UI Corner + Stroke
Instance.new("UICorner", Frame)
local Stroke = Instance.new("UIStroke", Frame)
Stroke.Thickness = 2
Stroke.Color = Color3.fromRGB(80, 80, 80)

-- Title bar
local TitleBar = Instance.new("Frame")
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
TitleBar.Parent = Frame
Instance.new("UICorner", TitleBar)

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, -60, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "🥚 Egg Opener"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 16
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = TitleBar

-- Minimize Button
local MinBtn = Instance.new("TextButton")
MinBtn.Size = UDim2.new(0, 25, 0, 25)
MinBtn.Position = UDim2.new(1, -55, 0.5, -12)
MinBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
MinBtn.Text = "-"
MinBtn.Font = Enum.Font.GothamBold
MinBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
MinBtn.TextSize = 18
MinBtn.Parent = TitleBar
Instance.new("UICorner", MinBtn)

-- Close Button
local CloseBtn = Instance.new("TextButton")
CloseBtn.Size = UDim2.new(0, 25, 0, 25)
CloseBtn.Position = UDim2.new(1, -28, 0.5, -12)
CloseBtn.BackgroundColor3 = Color3.fromRGB(120, 40, 40)
CloseBtn.Text = "X"
CloseBtn.Font = Enum.Font.GothamBold
CloseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseBtn.TextSize = 16
CloseBtn.Parent = TitleBar
Instance.new("UICorner", CloseBtn)

-- Egg Input
local EggBox = Instance.new("TextBox")
EggBox.Size = UDim2.new(0.9, 0, 0, 30)
EggBox.Position = UDim2.new(0.05, 0, 0.35, 0)
EggBox.PlaceholderText = "Enter Egg Name (e.g. ToyBeachBall)"
EggBox.Text = ""
EggBox.ClearTextOnFocus = false
EggBox.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
EggBox.TextColor3 = Color3.fromRGB(255, 255, 255)
EggBox.Font = Enum.Font.Gotham
EggBox.TextSize = 14
EggBox.Parent = Frame
Instance.new("UICorner", EggBox)

-- Toggle button
local Toggle = Instance.new("TextButton")
Toggle.Size = UDim2.new(0.9, 0, 0, 35)
Toggle.Position = UDim2.new(0.05, 0, 0.7, 0)
Toggle.Text = "▶ Start Loop"
Toggle.BackgroundColor3 = Color3.fromRGB(60, 100, 60)
Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
Toggle.Font = Enum.Font.GothamBold
Toggle.TextSize = 16
Toggle.Parent = Frame
Instance.new("UICorner", Toggle)

-- Minimized Icon
local MiniIcon = Instance.new("TextButton")
MiniIcon.Size = UDim2.new(0, 120, 0, 35)
MiniIcon.Position = UDim2.new(0, 20, 0, 200)
MiniIcon.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MiniIcon.Text = "🥚 Egg Opener"
MiniIcon.Visible = false
MiniIcon.Font = Enum.Font.GothamBold
MiniIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
MiniIcon.TextSize = 14
MiniIcon.Parent = ScreenGui
Instance.new("UICorner", MiniIcon)

--// Remote reference
local EggRemote = ReplicatedStorage
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("EggService")
    :WaitForChild("RF")
    :WaitForChild("purchaseEgg")

local ItemRemote = ReplicatedStorage
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("ItemService")
    :WaitForChild("RF")
    :WaitForChild("UseItem")

-- Auto-use potions before loop
local function usePotions()
    local potions = {"Golden Potion","Luck Potion","Void Potion"}
    for _,p in ipairs(potions) do
        local args = {p,"1"}
        pcall(function()
            ItemRemote:InvokeServer(unpack(args))
        end)
    end
end

-- Function to buy egg
local function openEgg(name)
    if name and name ~= "" then
        local args = {name,[5] = true,[4] = false}
        pcall(function()
            EggRemote:InvokeServer(unpack(args))
        end)
    end
end

-- Button toggle logic
Toggle.MouseButton1Click:Connect(function()
    if loopRunning then
        loopRunning = false
        Toggle.Text = "▶ Start Loop"
        Toggle.BackgroundColor3 = Color3.fromRGB(60, 100, 60)
    else
        if EggBox.Text == "" then
            warn("⚠️ Enter an Egg Name first!")
            return
        end
        loopRunning = true
        Toggle.Text = "■ Stop Loop"
        Toggle.BackgroundColor3 = Color3.fromRGB(120, 40, 40)

        -- Use potions before loop
        usePotions()

        -- Start loop
        task.spawn(function()
            while loopRunning do
                openEgg(EggBox.Text)
                task.wait() -- ⚡ spam fast, adjust if needed
            end
        end)
    end
end)

-- Minimize / Restore
MinBtn.MouseButton1Click:Connect(function()
    Frame.Visible = false
    MiniIcon.Visible = true
end)

MiniIcon.MouseButton1Click:Connect(function()
    Frame.Visible = true
    MiniIcon.Visible = false
end)

-- Close GUI
CloseBtn.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

    end
})
GUI:CreateButton({
    parent = main, 
    text = "Auto Spinner", 
    callback = function()
--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer

--// Variables
local loopRunning = false
local spinName = ""
local spinAmount = ""

--// GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "SpinGui"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.CoreGui

-- Main Frame
local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 300, 0, 180)
Frame.Position = UDim2.new(0.35, 0, 0.35, 0)
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
Frame.Active = true
Frame.Draggable = true
Frame.Parent = ScreenGui

-- UI Corner + Stroke
Instance.new("UICorner", Frame)
local Stroke = Instance.new("UIStroke", Frame)
Stroke.Thickness = 2
Stroke.Color = Color3.fromRGB(80, 80, 80)

-- Title bar
local TitleBar = Instance.new("Frame")
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
TitleBar.Parent = Frame
Instance.new("UICorner", TitleBar)

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, -60, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "🎰 Auto Spin"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 16
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = TitleBar

-- Minimize Button
local MinBtn = Instance.new("TextButton")
MinBtn.Size = UDim2.new(0, 25, 0, 25)
MinBtn.Position = UDim2.new(1, -55, 0.5, -12)
MinBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
MinBtn.Text = "-"
MinBtn.Font = Enum.Font.GothamBold
MinBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
MinBtn.TextSize = 18
MinBtn.Parent = TitleBar
Instance.new("UICorner", MinBtn)

-- Close Button
local CloseBtn = Instance.new("TextButton")
CloseBtn.Size = UDim2.new(0, 25, 0, 25)
CloseBtn.Position = UDim2.new(1, -28, 0.5, -12)
CloseBtn.BackgroundColor3 = Color3.fromRGB(120, 40, 40)
CloseBtn.Text = "X"
CloseBtn.Font = Enum.Font.GothamBold
CloseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseBtn.TextSize = 16
CloseBtn.Parent = TitleBar
Instance.new("UICorner", CloseBtn)

-- TextBox for Spin Name
local NameBox = Instance.new("TextBox")
NameBox.Size = UDim2.new(0.9, 0, 0, 30)
NameBox.Position = UDim2.new(0.05, 0, 0.3, 0)
NameBox.PlaceholderText = "Enter Spin Name (e.g. Miners Fortune)"
NameBox.Text = ""
NameBox.ClearTextOnFocus = false
NameBox.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
NameBox.TextColor3 = Color3.fromRGB(255, 255, 255)
NameBox.Font = Enum.Font.Gotham
NameBox.TextSize = 14
NameBox.Parent = Frame
Instance.new("UICorner", NameBox)

-- TextBox for Spin Amount
local AmountBox = Instance.new("TextBox")
AmountBox.Size = UDim2.new(0.9, 0, 0, 30)
AmountBox.Position = UDim2.new(0.05, 0, 0.5, 0)
AmountBox.PlaceholderText = "Enter Amount (e.g. x25)"
AmountBox.Text = ""
AmountBox.ClearTextOnFocus = false
AmountBox.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
AmountBox.TextColor3 = Color3.fromRGB(255, 255, 255)
AmountBox.Font = Enum.Font.Gotham
AmountBox.TextSize = 14
AmountBox.Parent = Frame
Instance.new("UICorner", AmountBox)

-- Toggle button
local Toggle = Instance.new("TextButton")
Toggle.Size = UDim2.new(0.9, 0, 0, 35)
Toggle.Position = UDim2.new(0.05, 0, 0.75, 0)
Toggle.Text = "▶ Start Auto Spin"
Toggle.BackgroundColor3 = Color3.fromRGB(60, 100, 60)
Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
Toggle.Font = Enum.Font.GothamBold
Toggle.TextSize = 16
Toggle.Parent = Frame
Instance.new("UICorner", Toggle)

-- Minimized Icon
local MiniIcon = Instance.new("TextButton")
MiniIcon.Size = UDim2.new(0, 100, 0, 35)
MiniIcon.Position = UDim2.new(0, 20, 0, 200)
MiniIcon.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MiniIcon.Text = "🎰 Auto Spin"
MiniIcon.Visible = false
MiniIcon.Font = Enum.Font.GothamBold
MiniIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
MiniIcon.TextSize = 14
MiniIcon.Parent = ScreenGui
Instance.new("UICorner", MiniIcon)

--// Remote reference
local SpinRemote = ReplicatedStorage
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("SpinnerService")
    :WaitForChild("RF")
    :WaitForChild("Spin")

-- Function to spin
local function doSpin(name, amount)
    if name ~= "" and amount ~= "" then
        local args = { name, amount }
        local success, result = pcall(function()
            return SpinRemote:InvokeServer(unpack(args))
        end)
        if success then
            print("Spun:", name, amount, "Result:", result)
        else
            warn("❌ Failed to spin:", name, amount)
        end
    end
end

-- Button toggle logic
Toggle.MouseButton1Click:Connect(function()
    if loopRunning then
        loopRunning = false
        Toggle.Text = "▶ Start Auto Spin"
        Toggle.BackgroundColor3 = Color3.fromRGB(60, 100, 60)
    else
        spinName = NameBox.Text
        spinAmount = AmountBox.Text
        if spinName == "" or spinAmount == "" then
            warn("⚠️ Please enter spin name & amount first!")
            return
        end
        loopRunning = true
        Toggle.Text = "■ Stop Auto Spin"
        Toggle.BackgroundColor3 = Color3.fromRGB(120, 40, 40)

        -- Start loop
        task.spawn(function()
            while loopRunning do
                doSpin(spinName, spinAmount)
                task.wait(0.2) -- small delay
            end
        end)
    end
end)

-- Minimize / Restore
MinBtn.MouseButton1Click:Connect(function()
    Frame.Visible = false
    MiniIcon.Visible = true
end)

MiniIcon.MouseButton1Click:Connect(function()
    Frame.Visible = true
    MiniIcon.Visible = false
end)

-- Close GUI
CloseBtn.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)
end})
GUI:CreateButton({
    parent = main, 
    text = "Auto Open Chest", 
    callback = function()
--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer

--// Variables
local loopRunning = false
local chestName = ""

--// GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ChestGui"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.CoreGui

-- Main Frame
local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 280, 0, 150)
Frame.Position = UDim2.new(0.35, 0, 0.35, 0)
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
Frame.Active = true
Frame.Draggable = true
Frame.Parent = ScreenGui

-- UI Corner + Stroke
Instance.new("UICorner", Frame)
local Stroke = Instance.new("UIStroke", Frame)
Stroke.Thickness = 2
Stroke.Color = Color3.fromRGB(80, 80, 80)

-- Title bar
local TitleBar = Instance.new("Frame")
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
TitleBar.Parent = Frame
Instance.new("UICorner", TitleBar)

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, -60, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "⚒️ Chest Opener"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 16
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = TitleBar

-- Minimize Button
local MinBtn = Instance.new("TextButton")
MinBtn.Size = UDim2.new(0, 25, 0, 25)
MinBtn.Position = UDim2.new(1, -55, 0.5, -12)
MinBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
MinBtn.Text = "-"
MinBtn.Font = Enum.Font.GothamBold
MinBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
MinBtn.TextSize = 18
MinBtn.Parent = TitleBar
Instance.new("UICorner", MinBtn)

-- Close Button
local CloseBtn = Instance.new("TextButton")
CloseBtn.Size = UDim2.new(0, 25, 0, 25)
CloseBtn.Position = UDim2.new(1, -28, 0.5, -12)
CloseBtn.BackgroundColor3 = Color3.fromRGB(120, 40, 40)
CloseBtn.Text = "X"
CloseBtn.Font = Enum.Font.GothamBold
CloseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseBtn.TextSize = 16
CloseBtn.Parent = TitleBar
Instance.new("UICorner", CloseBtn)

-- TextBox for chest name
local TextBox = Instance.new("TextBox")
TextBox.Size = UDim2.new(0.9, 0, 0, 30)
TextBox.Position = UDim2.new(0.05, 0, 0.35, 0)
TextBox.PlaceholderText = "Enter chest name (e.g. MiningVault)"
TextBox.Text = ""
TextBox.ClearTextOnFocus = false
TextBox.BackgroundColor3 = Color3.fromRGB(50, 50, 60)
TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
TextBox.Font = Enum.Font.Gotham
TextBox.TextSize = 14
TextBox.Parent = Frame
Instance.new("UICorner", TextBox)

-- Toggle button
local Toggle = Instance.new("TextButton")
Toggle.Size = UDim2.new(0.9, 0, 0, 35)
Toggle.Position = UDim2.new(0.05, 0, 0.7, 0)
Toggle.Text = "▶ Start Loop"
Toggle.BackgroundColor3 = Color3.fromRGB(60, 100, 60)
Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
Toggle.Font = Enum.Font.GothamBold
Toggle.TextSize = 16
Toggle.Parent = Frame
Instance.new("UICorner", Toggle)

-- Minimized Icon
local MiniIcon = Instance.new("TextButton")
MiniIcon.Size = UDim2.new(0, 100, 0, 35)
MiniIcon.Position = UDim2.new(0, 20, 0, 200)
MiniIcon.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MiniIcon.Text = "Chest Opener"
MiniIcon.Visible = false
MiniIcon.Font = Enum.Font.GothamBold
MiniIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
MiniIcon.TextSize = 14
MiniIcon.Parent = ScreenGui
Instance.new("UICorner", MiniIcon)

--// Remote reference
local ChestRemote = ReplicatedStorage
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("ChestService")
    :WaitForChild("RF")
    :WaitForChild("Open")

-- Function to invoke chest
local function openChest(name)
    if name and name ~= "" then
        local success, result = pcall(function()
            return ChestRemote:InvokeServer(name)
        end)
        if success then
            print("Opened chest:", name, "Result:", result)
        else
            warn("Failed to open chest:", name)
        end
    end
end

-- Button toggle logic
Toggle.MouseButton1Click:Connect(function()
    if loopRunning then
        loopRunning = false
        Toggle.Text = "▶ Start Loop"
        Toggle.BackgroundColor3 = Color3.fromRGB(60, 100, 60)
    else
        chestName = TextBox.Text
        if chestName == "" then
            warn("⚠️ Please enter a chest name first!")
            return
        end
        loopRunning = true
        Toggle.Text = "■ Stop Loop"
        Toggle.BackgroundColor3 = Color3.fromRGB(120, 40, 40)

        -- Start loop
        task.spawn(function()
            while loopRunning do
                openChest(chestName)
                task.wait(0.3) -- delay
            end
        end)
    end
end)

-- Minimize / Restore
MinBtn.MouseButton1Click:Connect(function()
    Frame.Visible = false
    MiniIcon.Visible = true
end)

MiniIcon.MouseButton1Click:Connect(function()
    Frame.Visible = true
    MiniIcon.Visible = false
end)

-- Close GUI
CloseBtn.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)
end})
GUI:CreateButton({
    parent = main, 
    text = "Auto Mining", 
    callback = function()
--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

--// Remotes
local mineRemote = ReplicatedStorage.Packages.Knit.Services.MiningService.RF.MineBlock
local smeltAddRemote = ReplicatedStorage.Packages.Knit.Services.OreSmeltingService.RF.AddAllOres
local smeltClaimRemote = ReplicatedStorage.Packages.Knit.Services.OreSmeltingService.RF.ClaimSmelting

-- Assets
local templateFolder = ReplicatedStorage:WaitForChild("Assets"):WaitForChild("MiningBlocks")
local miningRoot = Workspace.GameObjects.Mining

-- Settings
local LOOP_DELAY = 0.2
_G.mineUnderFeet = false
_G.masterMineAll = false
_G.autoSmelt = false
_G.returnLastSpot = false
_G.autoCheckpoint = false

-- Variables
local lastSafePos = nil
local lastCheckpoint = nil
local lastAction = tick()

--// GUI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "MiningHelperGui"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.CoreGui

-- Main Frame
local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 300, 0, 320)
Frame.Position = UDim2.new(0.35, 0, 0.25, 0)
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
Frame.Active = true
Frame.Draggable = true
Frame.Parent = ScreenGui
Instance.new("UICorner", Frame)
local Stroke = Instance.new("UIStroke", Frame)
Stroke.Thickness = 2
Stroke.Color = Color3.fromRGB(80, 80, 80)

-- Title bar
local TitleBar = Instance.new("Frame")
TitleBar.Size = UDim2.new(1, 0, 0, 30)
TitleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
TitleBar.Parent = Frame
Instance.new("UICorner", TitleBar)

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, -60, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "⛏ Mining Helper"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 16
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = TitleBar

-- Minimize Button
local MinBtn = Instance.new("TextButton")
MinBtn.Size = UDim2.new(0, 25, 0, 25)
MinBtn.Position = UDim2.new(1, -55, 0.5, -12)
MinBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
MinBtn.Text = "-"
MinBtn.Font = Enum.Font.GothamBold
MinBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
MinBtn.TextSize = 18
MinBtn.Parent = TitleBar
Instance.new("UICorner", MinBtn)

-- Close Button
local CloseBtn = Instance.new("TextButton")
CloseBtn.Size = UDim2.new(0, 25, 0, 25)
CloseBtn.Position = UDim2.new(1, -28, 0.5, -12)
CloseBtn.BackgroundColor3 = Color3.fromRGB(120, 40, 40)
CloseBtn.Text = "X"
CloseBtn.Font = Enum.Font.GothamBold
CloseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseBtn.TextSize = 16
CloseBtn.Parent = TitleBar
Instance.new("UICorner", CloseBtn)

-- Status Label
local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(1, -10, 0, 25)
StatusLabel.Position = UDim2.new(0, 5, 1, -30)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Text = "Status: Idle"
StatusLabel.Font = Enum.Font.Gotham
StatusLabel.TextSize = 14
StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
StatusLabel.TextXAlignment = Enum.TextXAlignment.Left
StatusLabel.Parent = Frame

-- Restore Button
local MiniIcon = Instance.new("TextButton")
MiniIcon.Size = UDim2.new(0, 120, 0, 35)
MiniIcon.Position = UDim2.new(0, 20, 0, 200)
MiniIcon.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MiniIcon.Text = "⛏ Mining Helper"
MiniIcon.Visible = false
MiniIcon.Font = Enum.Font.GothamBold
MiniIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
MiniIcon.TextSize = 14
MiniIcon.Parent = ScreenGui
Instance.new("UICorner", MiniIcon)

-- Helper: toggle style
local function setToggleState(btn, state, text)
	if state then
		btn.Text = "■ " .. text .. " (ON)"
		btn.BackgroundColor3 = Color3.fromRGB(60, 100, 60)
	else
		btn.Text = "▶ " .. text .. " (OFF)"
		btn.BackgroundColor3 = Color3.fromRGB(120, 40, 40)
	end
end

local function createToggle(yPos, text, toggleVarName)
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(0.9, 0, 0, 35)
	btn.Position = UDim2.new(0.05, 0, 0, yPos)
	btn.BackgroundColor3 = Color3.fromRGB(120, 40, 40)
	btn.TextColor3 = Color3.fromRGB(255, 255, 255)
	btn.Font = Enum.Font.GothamBold
	btn.TextSize = 14
	btn.Text = "▶ " .. text .. " (OFF)"
	btn.Parent = Frame
	Instance.new("UICorner", btn)

	btn.MouseButton1Click:Connect(function()
		_G[toggleVarName] = not _G[toggleVarName]
		setToggleState(btn, _G[toggleVarName], text)
	end)

	return btn
end

-- 5 Toggles
createToggle(40,  "Mine Under Feet",   "mineUnderFeet")
createToggle(80,  "Mine Ores + Specials", "masterMineAll")
createToggle(120, "Auto Smelt Ores",   "autoSmelt")
createToggle(160, "Return Last Spot",  "returnLastSpot")
createToggle(200, "Auto Checkpoint",   "autoCheckpoint")

--// Functions
local function markAction()
	lastAction = tick()
end

-- Save safe pos
task.spawn(function()
	while task.wait(1) do
		local char = player.Character
		local hrp = char and char:FindFirstChild("HumanoidRootPart")
		if hrp and hrp.Position.Y > 0 then
			lastSafePos = hrp.Position
		end
	end
end)

-- Auto checkpoint
task.spawn(function()
	while task.wait(20) do
		if _G.autoCheckpoint then
			local char = player.Character
			local hrp = char and char:FindFirstChild("HumanoidRootPart")
			if hrp then
				lastCheckpoint = hrp.Position
				StatusLabel.Text = "Status: Saved Checkpoint"
			end
		end
	end
end)

-- Mine under feet
task.spawn(function()
	while task.wait(0.05) do
		if _G.mineUnderFeet then
			local char = player.Character
			local hrp = char and char:FindFirstChild("HumanoidRootPart")
			if hrp then
				local ray = Ray.new(hrp.Position, Vector3.new(0, -10, 0))
				local part = Workspace:FindPartOnRay(ray, char)
				if part and part.Parent and part.Parent:IsA("Model") and part.Parent.PrimaryPart then
					pcall(function()
						mineRemote:InvokeServer(part.Parent)
					end)
					markAction()
					StatusLabel.Text = "Status: Mining Under Feet..."
				end
			end
		end
	end
end)

-- Main mining & smelting loop
task.spawn(function()
	while task.wait(LOOP_DELAY) do
		local didSomething = false
		character = player.Character or player.CharacterAdded:Wait()
		humanoidRootPart = character:WaitForChild("HumanoidRootPart")

		-- Mine all ores & specials
		for _, zone in ipairs(miningRoot:GetChildren()) do
			if zone:FindFirstChild("Blocks") then
				for _, block in ipairs(zone.Blocks:GetChildren()) do
					if block:IsA("Model") and block.PrimaryPart then
						if _G.masterMineAll and (
							string.find(block.Name, "Ore")
							or string.find(block.Name, "Mega")
							or string.find(block.Name, "Giga")
							or string.find(block.Name, "Medal")
							or string.find(block.Name, "Potion")
							or string.find(block.Name, "Mining")
						) then
							pcall(function()
								mineRemote:InvokeServer(block)
							end)
							markAction()
							StatusLabel.Text = "Status: Mining " .. block.Name .. "..."
							didSomething = true
						end
					end
				end
			end
		end

		-- Auto smelt
		if _G.autoSmelt then
			for _, block in ipairs(templateFolder:GetChildren()) do
				if string.find(block.Name, "Ore") then
					pcall(function()
						smeltAddRemote:InvokeServer(block.Name, 1)
					end)
				end
			end
			pcall(function()
				smeltClaimRemote:InvokeServer()
			end)
			markAction()
			StatusLabel.Text = "Status: Smelting Ores..."
			didSomething = true
		end

		-- Idle
		if not didSomething and not _G.mineUnderFeet then
			StatusLabel.Text = "Status: Idle"
		end
	end
end)

-- Idle return
task.spawn(function()
	while task.wait(1) do
		if _G.returnLastSpot and lastSafePos then
			if (tick() - lastAction) > 3 then
				local char = player.Character
				local hrp = char and char:FindFirstChild("HumanoidRootPart")
				if hrp then
					hrp.CFrame = CFrame.new(lastSafePos + Vector3.new(0, 5, 0))
					StatusLabel.Text = "Status: Auto-Returned (Idle)"
					markAction()
				end
			end
		end
	end
end)

-- Minimize / Restore
MinBtn.MouseButton1Click:Connect(function()
	Frame.Visible = false
	MiniIcon.Visible = true
end)

MiniIcon.MouseButton1Click:Connect(function()
	Frame.Visible = true
	MiniIcon.Visible = false
end)

-- Close GUI
CloseBtn.MouseButton1Click:Connect(function()
	ScreenGui:Destroy()
end)
end})
