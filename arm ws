local GUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/BloodLetters/Ash-Libs/refs/heads/main/source.lua"))()
GUI:CreateMain({
    Name = "Ashlabs",
    title = "Arm Wrestle Simulator",
    ToggleUI = "K",
    WindowIcon = "home", -- you can use lucid icons
    -- WindowHeight = 600, -- default height
    -- WindowWidth = 800, -- default width
    Theme = {
        Background = Color3.fromRGB(25, 25, 35),
        Secondary = Color3.fromRGB(35, 35, 45),
        Accent = Color3.fromRGB(138, 43, 226),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(180, 180, 180),
        Border = Color3.fromRGB(50, 50, 60),
        NavBackground = Color3.fromRGB(20, 20, 30)
    },
    Blur = { -- Buggy
        Enable = false, -- transparent option
        value = 0.2
    },
    Config = { -- not implemented yet
        Enabled = false,
    }
})

local main = GUI:CreateTab("Main", "user-round") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Player"
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Claim", 
    default = true, 
    callback = function(claim)
	if claim then	
	_G.claim1 = true
	while _G.claim1 == true do
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local KnitServices = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services")

-- EventPassService Remotes
local EventPassRF = KnitServices:WaitForChild("EventPassService"):WaitForChild("RF")

-- TimedRewardService Remotes
local TimedRewardRE = KnitServices:WaitForChild("TimedRewardService"):WaitForChild("RE")

-- Reset Event Pass
EventPassRF:WaitForChild("Reset"):InvokeServer()

-- Claim all Free Event Pass rewards (1â€“12)
for i = 1, 12 do
	EventPassRF:WaitForChild("ClaimReward"):InvokeServer("Free", i)
end

-- Claim selected Timed Rewards
local timedRewards = {"1","2","3","6","8","9","11","12"}

for _, id in ipairs(timedRewards) do
	TimedRewardRE:WaitForChild("onClaim"):FireServer(id)
end
task.wait(120)
end
		else
		_G.claim1 = false
           end
        print("Toggle state:", claim)
    end
})

GUI:CreateToggle({
    parent = main, 
    text = "Auto Swing", 
    default = true, 
    callback = function(swing)
if swing then
    _G.loop2 = true
	while _G.loop2 == true do
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- Cache the remote once
local onClick = ReplicatedStorage.Packages
    .Knit.Services.ToolService.RE.onClick

-- Fast loop (fires every Heartbeat frame)
RunService.Heartbeat:Connect(function()
    onClick:FireServer()
end)
end

		else
		_G.loop2 = false
           end
		print("Toggle state:", swing)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Roll Aura", 
    default = true, 
    callback = function(Aura)
if Aura then
        _G.loop3 = true
	while _G.loop3 == true do
		task.wait(0.1)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("AuraService"):WaitForChild("RF"):WaitForChild("Roll"):InvokeServer()
           end
		else
		_G.loop3 = false
           end
		print("Toggle state:", Aura)
    end
})

local main = GUI:CreateTab("Spin and Shop", "webhook") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Shop"
})

GUI:CreateToggle({
    parent = main, 
    text = "Squid Merchant", 
    default = true, 
    callback = function(squid)
if squid then
        _G.squid1 = true
	while _G.squid1 == true do
task.wait(200)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local KnitServices = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services")

-- Cache remotes
local LimitedMerchantRF = KnitServices.LimitedMerchantService.RF.BuyItem
local UniversalShopRF = KnitServices.UniversalShopService.RF.Buy

-- Items to buy
local buys = {
    {"Hidden Merchant", 4, LimitedMerchantRF},
    {"Hidden Merchant", 5, LimitedMerchantRF},
    {"Frontman Merchant", 5, LimitedMerchantRF},
    {"BrainrotMarket", 9, UniversalShopRF},
    {"Frozen Merchant", 4, LimitedMerchantRF},
    {"Frozen Merchant", 5, LimitedMerchantRF},
    {"Pirate Merchant", 4, LimitedMerchantRF},
    {"Pirate Merchant", 5, LimitedMerchantRF},
}

-- Loop through all buys
for _, data in ipairs(buys) do
    local merchant, id, remote = data[1], data[2], data[3]
    remote:InvokeServer(merchant, id)
end

end
		else
		_G.squid1 = false
           end
        print("Toggle state:", squid)
    end
})


local main = GUI:CreateTab("Misc", "circle-ellipsis") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Option"
})

GUI:CreateButton({
    parent = main, 
    text = "Auto CLick", 
    callback = function()
getgenv().key = "Hostile"
loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/The-telligence/main/MC%20KSystem%202"))()
end})

GUI:CreateButton({
    parent = main, 
    text = "Lds hub", 
    callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/SenhorLDS/ProjectLDSHUB/refs/heads/main/Loader%20LDS%20HUB'))()
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Lds Mutate", 
    callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/yadielsantoss/full-script/refs/heads/main/MUTATE%20aws'))()
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Use Mining Cereal", 
    callback = function()
-- List of items and their values
local x = 0
while x < 3000 do
    print("x is:", x)
    x = x + 1
    task.wait() -- Important for preventing crashes in infinite loops
	local args = {
	"Gemstone Cereal",
	"1"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemService"):WaitForChild("RF"):WaitForChild("UseItem"):InvokeServer(unpack(args))

end
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Use Item", 
    callback = function()
-- List of items and their values
--// Items to use
local items = {
    {"Cookie", "3"},
    {"Donut", "3"},
    {"Banana", "2"},
    {"Dragon Fruit", "3"},
    {"Starfruit", "3"},
}

--// Remote reference
local useItem = game:GetService("ReplicatedStorage")
    .Packages.Knit.Services.ItemService.RF.UseItem

--// Loop through items and use each 25x
for _, args in ipairs(items) do
    for i = 1, 25 do
        useItem:InvokeServer(unpack(args))
        task.wait(0.00001) -- small delay (adjust if needed)
    end
end


    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Anti AFK", 
    default = true, 
    callback = function()
local VirtualUser = game:GetService('VirtualUser')
game:GetService('Players').LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Anti AFK loaded!",
    Text = "Made by Tuuguu936",
    Button1 = "Okay",
    Duration = 5
})
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Buy Medal", 
    callback = function()
local buyMedal = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("MedalMerchantService")
    :WaitForChild("RF")
    :WaitForChild("Buy")

buyMedal:InvokeServer("Rune Medal")
buyMedal:InvokeServer("Firework Medal")
buyMedal:InvokeServer("Feel Good Medal")
buyMedal:InvokeServer("Easter Medal")
buyMedal:InvokeServer("Soulfire Medal")
buyMedal:InvokeServer("Godly Medal")
buyMedal:InvokeServer("Thunder Medal")
buyMedal:InvokeServer("Bulk Medal")
buyMedal:InvokeServer("Temple Medal")
buyMedal:InvokeServer("Curler 3")
buyMedal:InvokeServer("Villain Medal")
buyMedal:InvokeServer("Captain Medal")
buyMedal:InvokeServer("Beach Medal")
buyMedal:InvokeServer("Trident Medal")
buyMedal:InvokeServer("Yin Yang Medal")
buyMedal:InvokeServer("Bandit Medal")
buyMedal:InvokeServer("Holly Medal")
buyMedal:InvokeServer("Volcano Medal")
buyMedal:InvokeServer("Spooky Medal")
buyMedal:InvokeServer("Endless Grips 1")
buyMedal:InvokeServer("Hallo Medal")
buyMedal:InvokeServer("Ninja Medal")
buyMedal:InvokeServer("Snowman Medal")
buyMedal:InvokeServer("Intruder Medal")
buyMedal:InvokeServer("Criminal Medal")
buyMedal:InvokeServer("Endless Summer 1")
buyMedal:InvokeServer("Prisoner Medal")
buyMedal:InvokeServer("Twilight Medal")
buyMedal:InvokeServer("Hacker Medal")
buyMedal:InvokeServer("Noob Medal")
buyMedal:InvokeServer("Haunted Medal")
buyMedal:InvokeServer("Fire Medal")
buyMedal:InvokeServer("Athlete Medal")
buyMedal:InvokeServer("Skull Medal")
buyMedal:InvokeServer("Gripper 3")
buyMedal:InvokeServer("Boombox Medal")
buyMedal:InvokeServer("Lucky 1 Medal")
buyMedal:InvokeServer("Guard Medal")
end
})
GUI:CreateButton({
    parent = main, 
    text = "Reedem Gamepass", 
    callback = function()
	local claim = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("SeasonPassService")
    :WaitForChild("RF")
    :WaitForChild("Claim")

claim:InvokeServer("Regular",1)
claim:InvokeServer("Regular",2)
claim:InvokeServer("Regular",3)
claim:InvokeServer("Regular",4)
claim:InvokeServer("Regular",5)
claim:InvokeServer("Regular",6)
claim:InvokeServer("Regular",7)
claim:InvokeServer("Regular",8)
claim:InvokeServer("Regular",9)
claim:InvokeServer("Regular",10)
claim:InvokeServer("Regular",11)
claim:InvokeServer("Regular",12)
claim:InvokeServer("Regular",13)
claim:InvokeServer("Regular",14)
claim:InvokeServer("Regular",15)
claim:InvokeServer("Regular",16)
claim:InvokeServer("Regular",17)
claim:InvokeServer("Regular",18)
claim:InvokeServer("Regular",19)
claim:InvokeServer("Regular",20)
claim:InvokeServer("Regular",21)
claim:InvokeServer("Regular",22)
claim:InvokeServer("Regular",23)
claim:InvokeServer("Regular",24)
claim:InvokeServer("Regular",25)
claim:InvokeServer("Regular",26)
claim:InvokeServer("Regular",27)
claim:InvokeServer("Regular",28)
claim:InvokeServer("Regular",29)
claim:InvokeServer("Regular",30)

end
})
GUI:CreateButton({
    parent = main, 
    text = "Reedem Code", 
    callback = function()
local redeem = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("CodeRedemptionService")
    :WaitForChild("RE")
    :WaitForChild("onRedeem")

redeem:FireServer("banker")
redeem:FireServer("sorryoops")
redeem:FireServer("timetravel")
redeem:FireServer("world19")
redeem:FireServer("bulk")
redeem:FireServer("superhero")
redeem:FireServer("tokenstore")
redeem:FireServer("captain")
redeem:FireServer("skullbeard")
redeem:FireServer("pirate")
redeem:FireServer("athlete")
redeem:FireServer("tradingback")
redeem:FireServer("blossom")
redeem:FireServer("ninja")
redeem:FireServer("snowops")
redeem:FireServer("hideout")
redeem:FireServer("cosmic")
redeem:FireServer("stocking")
redeem:FireServer("frostlands")
redeem:FireServer("polar")
redeem:FireServer("shiny")
redeem:FireServer("Christmas")
redeem:FireServer("hacker")
redeem:FireServer("classic")
redeem:FireServer("clans")
redeem:FireServer("rifted")
redeem:FireServer("hauntedmanor")
redeem:FireServer("trainers")
redeem:FireServer("ghosthunting")
redeem:FireServer("spooky")
redeem:FireServer("soon")
redeem:FireServer("hatching")
redeem:FireServer("billion")
redeem:FireServer("Heavenly")
redeem:FireServer("rework")
redeem:FireServer("paradise")
redeem:FireServer("wasteland")
redeem:FireServer("apocalypse")
redeem:FireServer("energy")
redeem:FireServer("royalty")
redeem:FireServer("performance")
redeem:FireServer("charms")
redeem:FireServer("wizard")
redeem:FireServer("atlantis")
redeem:FireServer("800mvisits")
redeem:FireServer("icecold")
redeem:FireServer("forging")
redeem:FireServer("noob")
redeem:FireServer("fixingstuff")
redeem:FireServer("celebration")
redeem:FireServer("glassbridge")
redeem:FireServer("octogames")
redeem:FireServer("brainrot")
redeem:FireServer("21iscoming")
redeem:FireServer("welovemining")
redeem:FireServer("sorryfordelay")
redeem:FireServer("playfulmines")
redeem:FireServer("desertmines")

end})
local main = GUI:CreateTab("Battle", "swords") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Support Battle"
})

GUI:CreateButton({
    parent = main, 
    text = "Auto Fight Enemy Bot", 
    callback = function()
--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer

--// Remotes
local ArmWrestleService = ReplicatedStorage
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("ArmWrestleService")
    :WaitForChild("RF")

local RequestClick = ArmWrestleService:WaitForChild("RequestClick")
local RequestCritHit = ArmWrestleService:WaitForChild("RequestCritHit")

--// GUI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ArmWrestleUI"
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

-- Main Frame
local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 240, 0, 200)
frame.Position = UDim2.new(0.5, -120, 0.5, -100)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true
frame.Visible = true

-- Title Bar
local titleBar = Instance.new("Frame", frame)
titleBar.Size = UDim2.new(1, 0, 0, 20)
titleBar.BackgroundColor3 = Color3.fromRGB(40,40,40)

local title = Instance.new("TextLabel", titleBar)
title.Size = UDim2.new(1, -40, 1, 0)
title.Position = UDim2.new(0, 5, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Arm Wrestle Bot"
title.TextColor3 = Color3.new(1,1,1)
title.TextXAlignment = Enum.TextXAlignment.Left

-- Minimize button
local minimize = Instance.new("TextButton", titleBar)
minimize.Size = UDim2.new(0, 20, 1, 0)
minimize.Position = UDim2.new(1, -40, 0, 0)
minimize.Text = "-"
minimize.TextColor3 = Color3.new(1,1,1)
minimize.BackgroundTransparency = 1

-- Close button
local close = Instance.new("TextButton", titleBar)
close.Size = UDim2.new(0, 20, 1, 0)
close.Position = UDim2.new(1, -20, 0, 0)
close.Text = "X"
close.TextColor3 = Color3.new(1,0.3,0.3)
close.BackgroundTransparency = 1

-- Anime face icon (reopen button when minimized)
local reopen = Instance.new("ImageButton", screenGui)
reopen.Size = UDim2.new(0, 50, 0, 50)
reopen.Position = UDim2.new(0, 20, 0.5, -25)
reopen.BackgroundTransparency = 1
reopen.Visible = false
-- ðŸ‘‡ Anime face decal
reopen.Image = "rbxassetid://6031075938"
reopen.Active = true

-- Dragging for anime icon
local dragging, dragInput, dragStart, startPos
local function update(input)
    local delta = input.Position - dragStart
    reopen.Position = UDim2.new(
        startPos.X.Scale, startPos.X.Offset + delta.X,
        startPos.Y.Scale, startPos.Y.Offset + delta.Y
    )
end

reopen.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = reopen.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

reopen.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Scrollable container
local scroll = Instance.new("ScrollingFrame", frame)
scroll.Size = UDim2.new(1, 0, 1, -20)
scroll.Position = UDim2.new(0, 0, 0, 20)
scroll.CanvasSize = UDim2.new(0, 0, 0, 300)
scroll.ScrollBarThickness = 6
scroll.BackgroundTransparency = 1

-- Utility function for toggles
local function makeToggle(name, order)
    local button = Instance.new("TextButton", scroll)
    button.Size = UDim2.new(1, -20, 0, 35)
    button.Position = UDim2.new(0, 10, 0, (order-1) * 40)
    button.Text = "Start " .. name
    button.TextColor3 = Color3.new(1,1,1)
    button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    return button
end

-- Enemy input box
local textBox = Instance.new("TextBox", scroll)
textBox.Size = UDim2.new(1, -20, 0, 35)
textBox.Position = UDim2.new(0, 10, 0, 0)
textBox.PlaceholderText = "Enter Enemy Name"
textBox.TextColor3 = Color3.new(1,1,1)
textBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

-- Toggles
local fightToggle = makeToggle("Fight Loop", 2)
local clickToggle = makeToggle("Click Spam", 3)
local critToggle = makeToggle("Crit Spam", 4)

-- Logic
local runningFight, runningClick, runningCrit = false, false, false
local lastEnemy = ""

-- Save last enemy
textBox.FocusLost:Connect(function()
    if textBox.Text ~= "" then
        lastEnemy = textBox.Text
    end
end)

-- Fight toggle
fightToggle.MouseButton1Click:Connect(function()
    runningFight = not runningFight
    fightToggle.Text = runningFight and "Stop Fight Loop" or "Start Fight Loop"
    fightToggle.BackgroundColor3 = runningFight and Color3.fromRGB(0,100,0) or Color3.fromRGB(60,60,60)

    if runningFight then
        task.spawn(function()
            while runningFight do
                local enemy = textBox.Text ~= "" and textBox.Text or lastEnemy
                if enemy ~= "" then
                    lastEnemy = enemy
                    pcall(function()
                        ArmWrestleService:WaitForChild("RequestStartFight"):InvokeServer(enemy)
                        ArmWrestleService:WaitForChild("SetAuto"):InvokeServer(true)
                    end)
                end
                task.wait()
            end
        end)
    end
end)

-- Click spam toggle
clickToggle.MouseButton1Click:Connect(function()
    runningClick = not runningClick
    clickToggle.Text = runningClick and "Stop Click Spam" or "Start Click Spam"
    clickToggle.BackgroundColor3 = runningClick and Color3.fromRGB(0,100,0) or Color3.fromRGB(60,60,60)

    if runningClick then
        task.spawn(function()
            while runningClick do
                pcall(function()
                    RequestClick:InvokeServer()
                end)
                task.wait()
            end
        end)
    end
end)

-- Crit spam toggle
critToggle.MouseButton1Click:Connect(function()
    runningCrit = not runningCrit
    critToggle.Text = runningCrit and "Stop Crit Spam" or "Start Crit Spam"
    critToggle.BackgroundColor3 = runningCrit and Color3.fromRGB(0,100,0) or Color3.fromRGB(60,60,60)

    if runningCrit then
        task.spawn(function()
            while runningCrit do
                pcall(function()
                    RequestCritHit:InvokeServer()
                end)
                task.wait()
            end
        end)
    end
end)

-- Minimize
minimize.MouseButton1Click:Connect(function()
    frame.Visible = false
    reopen.Visible = true
end)

-- Close
close.MouseButton1Click:Connect(function()
    frame.Visible = false
    reopen.Visible = false
end)

-- Reopen
reopen.MouseButton1Click:Connect(function()
    frame.Visible = true
    reopen.Visible = false
end)

end})

GUI:CreateButton({
    parent = main, 
    text = "Auto Tower ", 
    callback = function()
--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local KnitServices = ReplicatedStorage.Packages.Knit.Services

--// Remotes
local ArmWrestleRF = KnitServices.ArmWrestleService.RF.SetAuto
local TowerRF = KnitServices.TowerService.RF.EnterTower

--// GUI Setup
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.ResetOnSpawn = false

-- Toggle icon (to hide/show main GUI)
local toggleIcon = Instance.new("TextButton")
toggleIcon.Size = UDim2.new(0, 40, 0, 40)
toggleIcon.Position = UDim2.new(0, 10, 0.5, -20)
toggleIcon.Text = "â‰¡"
toggleIcon.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
toggleIcon.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleIcon.Parent = screenGui

-- Main frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 220, 0, 120)
frame.Position = UDim2.new(0.5, -110, 0.5, -60)
frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
frame.Visible = false
frame.Active = true
frame.Draggable = true
frame.Parent = screenGui

-- TextBox
local textBox = Instance.new("TextBox")
textBox.Size = UDim2.new(0, 200, 0, 30)
textBox.Position = UDim2.new(0, 10, 0, 10)
textBox.PlaceholderText = "Type dungeon name..."
textBox.Text = ""
textBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
textBox.Parent = frame

-- Toggle button
local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 200, 0, 30)
toggleButton.Position = UDim2.new(0, 10, 0, 50)
toggleButton.Text = "Start (OFF)"
toggleButton.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Parent = frame

-- Variables
local running = false

-- Toggle icon click â†’ show/hide main GUI
toggleIcon.MouseButton1Click:Connect(function()
    frame.Visible = not frame.Visible
end)

-- Toggle loop
toggleButton.MouseButton1Click:Connect(function()
    running = not running
    if running then
        toggleButton.Text = "Stop (ON)"
        task.spawn(function()
            while running do
                local dungeonName = textBox.Text
                if dungeonName ~= "" then
                    ArmWrestleRF:InvokeServer(true)
                    TowerRF:InvokeServer(dungeonName, true)
                end
                task.wait(2) -- delay between runs
            end
        end)
    else
        toggleButton.Text = "Start (OFF)"
    end
end)

-- Make draggable for PC & Mobile
local dragging, dragStart, startPos

frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 
    or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
    end
end)

frame.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement 
    or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 
    or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end)

    end
})
local main = GUI:CreateTab("New Event", "squircle") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Option"
})
GUI:CreateToggle({
    parent = main, 
    text = "Equip Mining", 
    default = false, 
    callback = function(duck)
if duck then
local toolService = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("ToolService")
    :WaitForChild("RE")
    :WaitForChild("onGuiEquipRequest")

    _G.loop7 = true
	while _G.loop7 == true do
    -- Equip Dumbells
    toolService:FireServer("PlayfulMines", "Dumbells", "PlayfulMines12")
    task.wait(60) -- wait 1 minute

    -- Equip Grips
    toolService:FireServer("PlayfulMines", "Grips", "PlayfulMines12")
    task.wait(60) -- wait 1 minute
end
		else
		_G.loop7 = false
           end
        print("Toggle state:", duck)
    end
})


GUI:CreateToggle({
    parent = main, 
    text = "Trial Ice Lake", 
    default = false, 
    callback = function(Trialice)
if Trialice then
        _G.Trialice1 = true
			while _G.Trialice1 == true do
task.wait()			
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChampionshipService"):WaitForChild("RF"):WaitForChild("RequestJoin"):InvokeServer("Icy")
end
		else
		_G.Trialice1 = false
        end
		print("Toggle state:", Trialice)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Trial 13", 
    default = false, 
    callback = function(losttower)
if losttower then
        _G.losttower1 = true
	while _G.losttower1 == true do
task.wait(0.1)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChampionshipService"):WaitForChild("RF"):WaitForChild("RequestJoin"):InvokeServer("Medieval")

end
	  		else
		      _G.losttower1 = false
            end
print("Toggle state:", losttower)
    end
})

local main = GUI:CreateTab("misc", "cake") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Shortcut"
})
GUI:CreateButton({
    parent = main, 
    text = "Auto Spin Fortune", 
    callback = function()
-- LocalScript (StarterGui)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer

-- Remote path
local spinRemote = ReplicatedStorage
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("SpinnerService")
    :WaitForChild("RF")
    :WaitForChild("Spin")

-- Known fortunes
local fortunes = {
    "Miners Fortune",
    "Space Fortune",
    "Tralalero Fortune"
}

-- ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SpinGui"
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Main Frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 230, 0, 160)
frame.Position = UDim2.new(0.4, 0, 0.3, 0)
frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
frame.BorderSizePixel = 2
frame.Active = true
frame.Draggable = true
frame.Visible = false
frame.Parent = screenGui

-- Title bar
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -50, 0, 20)
title.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
title.Text = "ðŸŽ° Spinner"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextSize = 14
title.Font = Enum.Font.SourceSansBold
title.Parent = frame

-- Minimize button
local minimizeBtn = Instance.new("TextButton")
minimizeBtn.Size = UDim2.new(0, 25, 0, 20)
minimizeBtn.Position = UDim2.new(1, -50, 0, 0)
minimizeBtn.Text = "_"
minimizeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
minimizeBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
minimizeBtn.Parent = frame

-- Close button
local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0, 25, 0, 20)
closeBtn.Position = UDim2.new(1, -25, 0, 0)
closeBtn.Text = "X"
closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
closeBtn.BackgroundColor3 = Color3.fromRGB(100, 40, 40)
closeBtn.Parent = frame

-- TextBox
local textBox = Instance.new("TextBox")
textBox.Size = UDim2.new(0.9, 0, 0.2, 0)
textBox.Position = UDim2.new(0.05, 0, 0.2, 0)
textBox.PlaceholderText = "Enter Fortune..."
textBox.ClearTextOnFocus = false
textBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
textBox.TextColor3 = Color3.fromRGB(255, 255, 255)
textBox.Parent = frame

-- Dropdown button
local dropdownButton = Instance.new("TextButton")
dropdownButton.Size = UDim2.new(0.9, 0, 0.2, 0)
dropdownButton.Position = UDim2.new(0.05, 0, 0.45, 0)
dropdownButton.Text = "â–¼ Choose Fortune"
dropdownButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
dropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
dropdownButton.Parent = frame

-- Dropdown frame
local dropdownFrame = Instance.new("Frame")
dropdownFrame.Size = UDim2.new(0.9, 0, 0.5, 0)
dropdownFrame.Position = UDim2.new(0.05, 0, 0.65, 0)
dropdownFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
dropdownFrame.Visible = false
dropdownFrame.Parent = frame

for i, fortuneName in ipairs(fortunes) do
    local option = Instance.new("TextButton")
    option.Size = UDim2.new(1, 0, 0.3, 0)
    option.Position = UDim2.new(0, 0, (i-1)*0.33, 0)
    option.Text = fortuneName
    option.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    option.TextColor3 = Color3.fromRGB(255, 255, 255)
    option.Parent = dropdownFrame

    option.MouseButton1Click:Connect(function()
        textBox.Text = fortuneName
        dropdownFrame.Visible = false
    end)
end

dropdownButton.MouseButton1Click:Connect(function()
    dropdownFrame.Visible = not dropdownFrame.Visible
end)

-- Spin button
local spinButton = Instance.new("TextButton")
spinButton.Size = UDim2.new(0.9, 0, 0.2, 0)
spinButton.Position = UDim2.new(0.05, 0, 0.75, 0)
spinButton.Text = "Spin x25"
spinButton.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
spinButton.TextColor3 = Color3.fromRGB(255, 255, 255)
spinButton.Parent = frame

-- Toggle icon (always visible)
local toggleIcon = Instance.new("TextButton")
toggleIcon.Size = UDim2.new(0, 40, 0, 40)
toggleIcon.Position = UDim2.new(0, 10, 0.8, 0)
toggleIcon.Text = "ðŸŽ°"
toggleIcon.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
toggleIcon.TextSize = 20
toggleIcon.TextColor3 = Color3.fromRGB(255, 255, 0)
toggleIcon.Parent = screenGui

-- Button actions
spinButton.MouseButton1Click:Connect(function()
    local fortuneName = textBox.Text
    if fortuneName and fortuneName ~= "" then
        local args = {fortuneName, "x25"}
        print("Trying to spin:", args[1], args[2])
        spinRemote:InvokeServer(unpack(args))
    else
        warn("Type or pick a fortune first!")
    end
end)

minimizeBtn.MouseButton1Click:Connect(function()
    for _, child in ipairs(frame:GetChildren()) do
        if child ~= title and child ~= minimizeBtn and child ~= closeBtn then
            child.Visible = not child.Visible
        end
    end
end)

closeBtn.MouseButton1Click:Connect(function()
    frame.Visible = false
end)

toggleIcon.MouseButton1Click:Connect(function()
    frame.Visible = not frame.Visible
end)

    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Daily Login", 
    default = true, 
    callback = function(dailylogin)
if dailylogin then
        _G.dailylogin1 = true
			while _G.dailylogin1 == true do
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("DailyRewardService"):WaitForChild("RE"):WaitForChild("onClaimReward"):FireServer()
task.wait(20)
                        end
		else
		_G.dailylogin1 = false
        end
		print("Toggle state:", dailylogin)
    end
})

GUI:CreateToggle({
    parent = main, 
    text = "Auto Open Trainer", 
    default = true, 
    callback = function(trainer)
if trainer then
        _G.loop4 = true
	while _G.loop4 == true do
		task.wait(3)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Starter Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Gold Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Mythic Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Premium Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Prism Crate")
end
		else
		_G.loop4 = false
           end
		print("Toggle state:", trainer)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Open Kingdom Chest", 
    default = false, 
    callback = function(Kingdom)
if Kingdom then
        _G.loop33 = true
	while _G.loop33 == true do
		task.wait(0.1)
local args = {"KingdomChest"}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChestService"):WaitForChild("RF"):WaitForChild("Open"):InvokeServer(unpack(args))
           end
		else
		_G.loop33 = false
           end
		print("Toggle state:", Kingdom)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Open Ice Chest", 
    default = false, 
    callback = function(ice)
if ice then
        _G.ice1 = true
	while _G.ice1 == true do
		task.wait(0.1)
local args = {
	"IcyChest"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChestService"):WaitForChild("RF"):WaitForChild("Open"):InvokeServer(unpack(args))
           end
		else
		_G.ice1 = false
           end
		print("Toggle state:", ice)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Use Raspbery", 
    default = false, 
    callback = function(Dalgona)
if Dalgona then
        _G.Dalgona1 = true
	while _G.Dalgona1 == true do
		task.wait()
local args = {
	"Raspberry",
	"2"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemService"):WaitForChild("RF"):WaitForChild("UseItem"):InvokeServer(unpack(args))
end
		else
		_G.Dalgona1 = false
           end
        print("Toggle state:", Dalgona)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Upgrade Snack", 
    default = false, 
    callback = function(upgrade)
if upgrade then
        _G.upgrade1 = true
	while _G.upgrade1 == true do
task.wait()
-- LocalScript (StarterGui or StarterPlayerScripts)

local ReplicatedStorage = game:GetService("ReplicatedStorage")

local upgradeRemote = ReplicatedStorage
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("ItemCraftingService")
    :WaitForChild("RF")
    :WaitForChild("UpgradeSnack")

-- List of items and tiers
local itemsToUpgrade = {
    {Item = "Raspberry", Tier = 1},
    {Item = "Cookie", Tier = 1},
    {Item = "Cookie", Tier = 2},
    {Item = "Dragon Fruit", Tier = 1},
    {Item = "Dragon Fruit", Tier = 2},
    {Item = "Donut", Tier = 1},
    {Item = "Donut", Tier = 2},
    {Item = "Starfruit", Tier = 1},
    {Item = "Starfruit", Tier = 2},
}

-- Loop through each and upgrade
for _, snack in ipairs(itemsToUpgrade) do
    local args = {snack}
    print("Upgrading:", snack.Item, "Tier", snack.Tier)
    upgradeRemote:InvokeServer(unpack(args))
end
end
		else
		_G.upgrade1 = false
           end
        print("Toggle state:", upgrade)
    end
})

local main = GUI:CreateTab("misc", "egg") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Egg Hatch"
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Saturno Egg", 
    default = false, 
    callback = function(Saturno)
if Saturno then
        _G.Saturno1 = true
	while _G.Saturno1 == true do
		task.wait(0.1)
local args = {
	"Saturno",
	[5] = true,
	[4] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
end
		else
		_G.Saturno1 = false
           end
        print("Toggle state:", Saturno)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Mine Desert Egg", 
    default = false, 
    callback = function(BrainrotForest)
if BrainrotForest then
        _G.BrainrotForest1 = true
	while _G.BrainrotForest1 == true do
		task.wait(0.1)
local args = {
	"OrangeSpikedCrystal",
	[5] = true,
	[4] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
end
		else
		_G.BrainrotForest1 = false
           end
        print("Toggle state:", BrainrotForest)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Brainrot Food Egg", 
    default = false, 
    callback = function(BrainrotFood)
if BrainrotFood then
        _G.BrainrotFood1 = true
	while _G.BrainrotFood1 == true do
		task.wait(0.1)
local args = {
	"BrainrotFood",
	[5] = true,
	[4] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
end
		else
		_G.BrainrotFood1 = false
           end
        print("Toggle state:", BrainrotFood)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Cold Brainrot Egg", 
    default = false, 
    callback = function(ColdBrainrot)
if ColdBrainrot then
        _G.ColdBrainrot1 = true
	while _G.ColdBrainrot1 == true do
		task.wait(0.1)
local args = {
	"ColdBrainrot",
	[5] = true,
	[4] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
end
		else
		_G.ColdBrainrot1 = false
           end
        print("Toggle state:", ColdBrainrot)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Lucky Brainrot Egg", 
    default = false, 
    callback = function(LuckyBrainrot)
if LuckyBrainrot then
        _G.LuckyBrainrot1 = true
	while _G.LuckyBrainrot1 == true do
		task.wait(0.1)
local args = {
	"LuckyBrainrot",
	[5] = true,
	[4] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
end
		else
		_G.LuckyBrainrot1 = false
           end
        print("Toggle state:", LuckyBrainrot)
    end
})

