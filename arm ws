local GUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/BloodLetters/Ash-Libs/refs/heads/main/source.lua"))()
GUI:CreateMain({
    Name = "Ashlabs",
    title = "Arm Wrestle Simulator",
    ToggleUI = "K",
    WindowIcon = "home", -- you can use lucid icons
    -- WindowHeight = 600, -- default height
    -- WindowWidth = 800, -- default width
    Theme = {
        Background = Color3.fromRGB(25, 25, 35),
        Secondary = Color3.fromRGB(35, 35, 45),
        Accent = Color3.fromRGB(138, 43, 226),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(180, 180, 180),
        Border = Color3.fromRGB(50, 50, 60),
        NavBackground = Color3.fromRGB(20, 20, 30)
    },
    Blur = { -- Buggy
        Enable = false, -- transparent option
        value = 0.2
    },
    Config = { -- not implemented yet
        Enabled = false,
    }
})

local main = GUI:CreateTab("Main", "user-round") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Player"
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Claim Online", 
    default = true, 
    callback = function(claim)
	if claim then	
	_G.claim1 = true
	while _G.claim1 == true do
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TimedRewardService"):WaitForChild("RE"):WaitForChild("onClaim"):FireServer("1")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TimedRewardService"):WaitForChild("RE"):WaitForChild("onClaim"):FireServer("2")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TimedRewardService"):WaitForChild("RE"):WaitForChild("onClaim"):FireServer("3")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TimedRewardService"):WaitForChild("RE"):WaitForChild("onClaim"):FireServer("6")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TimedRewardService"):WaitForChild("RE"):WaitForChild("onClaim"):FireServer("8")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TimedRewardService"):WaitForChild("RE"):WaitForChild("onClaim"):FireServer("9")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TimedRewardService"):WaitForChild("RE"):WaitForChild("onClaim"):FireServer("11")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TimedRewardService"):WaitForChild("RE"):WaitForChild("onClaim"):FireServer("12")
task.wait(200)
end
		else
		_G.claim1 = false
           end
        print("Toggle state:", claim)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Claim Event Duck", 
    default = true, 
    callback = function(event)
if event then
        _G.loop8 = true
	while _G.loop8 == true do
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("Reset"):InvokeServer()
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",1)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",2)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",3)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",4)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",5)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",6)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",7)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",8)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",9)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",10)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",11)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EventPassService"):WaitForChild("RF"):WaitForChild("ClaimReward"):InvokeServer("Free",12)
task.wait(60)
 end
		else
		_G.loop8 = false
           end
        print("Toggle state:", event)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Swing", 
    default = true, 
    callback = function(swing)
if swing then
        _G.loop2 = true
	while _G.loop2 == true do
		task.wait()
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onClick"):FireServer()
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onClick"):FireServer()
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ToolService"):WaitForChild("RE"):WaitForChild("onClick"):FireServer()

 end
		else
		_G.loop2 = false
           end
		print("Toggle state:", swing)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Roll Aura", 
    default = true, 
    callback = function(Aura)
if Aura then
        _G.loop3 = true
	while _G.loop3 == true do
		task.wait(0.1)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("AuraService"):WaitForChild("RF"):WaitForChild("Roll"):InvokeServer()
           end
		else
		_G.loop3 = false
           end
		print("Toggle state:", Aura)
    end
})

local main = GUI:CreateTab("Spin and Shop", "webhook") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Shop"
})
GUI:CreateToggle({
    parent = main, 
    text = "Buy Arm Rewind", 
    default = true, 
    callback = function(arm)
if arm then
        _G.loop6 = true
	while _G.loop6 == true do
local args = {"Frosty Merchant",3}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Island Merchant",4}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Island Merchant",5}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Orc Merchant",3}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Orc Merchant",4}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Mining Merchant",4}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Mining Merchant",5}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Mining Merchant",5}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

task.wait(120)
 end
		else
		_G.loop6 = false
           end
        print("Toggle state:", arm)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Squid Merchant", 
    default = true, 
    callback = function(squid)
if squid then
        _G.squid1 = true
	while _G.squid1 == true do
task.wait(200)
local args = {"Hidden Merchant",4}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Hidden Merchant",5}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Frontman Merchant",5}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"BrainrotMarket",9}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("UniversalShopService"):WaitForChild("RF"):WaitForChild("Buy"):InvokeServer(unpack(args))
local args = {"Frozen Merchant",4}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Frozen Merchant",5}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))

end
		else
		_G.squid1 = false
           end
        print("Toggle state:", squid)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Buy Shop Summer", 
    default = true, 
    callback = function(shopsummer)
if shopsummer then
        _G.shopsummer1 = true
	while _G.shopsummer1 == true do
local args = {"Pirate Merchant",4}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
local args = {"Pirate Merchant",5}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("LimitedMerchantService"):WaitForChild("RF"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
task.wait(60)
 end
		else
		_G.shopsummer1 = false
           end
		 print("Toggle state:", shopsummer)
    end
})

local main = GUI:CreateTab("Battle", "swords") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Support Battle"
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Crit Hit", 
    default = true, 
    callback = function(Crit)
if Crit then
        _G.Crit1 = true
	while _G.Crit1 == true do
task.wait()
    local result = game:GetService("ReplicatedStorage")
        :WaitForChild("Packages")
        :WaitForChild("Knit")
        :WaitForChild("Services")
        :WaitForChild("ArmWrestleService")
        :WaitForChild("RF")
        :WaitForChild("RequestCritHit")
        :InvokeServer() end
		else
		_G.Crit1 = false
           end
print("Toggle state:", Crit)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Normal Hit", 
    default = true, 
    callback = function(Hit)
if Hit then
        _G.Hit1 = true
	while _G.Hit1 == true do
		task.wait()
game:GetService("ReplicatedStorage")
        :WaitForChild("Packages")
        :WaitForChild("Knit")
        :WaitForChild("Services")
        :WaitForChild("ArmWrestleService")
        :WaitForChild("RF")
        :WaitForChild("RequestClick")
        :InvokeServer() 
		end
		else
		_G.Hit1 = false
           end
		print("Toggle state:", Hit)
    end
})

local main = GUI:CreateTab("Misc", "circle-ellipsis") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Option"
})
GUI:CreateButton({
    parent = main, 
    text = "Auto CLick", 
    callback = function()
getgenv().key = "Hostile"
loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/The-telligence/main/MC%20KSystem%202"))()
end})
GUI:CreateButton({
    parent = main, 
    text = "Lds hub", 
    callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/SenhorLDS/ProjectLDSHUB/refs/heads/main/Loader%20LDS%20HUB'))()
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Lds Mutate", 
    callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/yadielsantoss/full-script/refs/heads/main/MUTATE%20aws'))()
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Use Mining Cereal", 
    callback = function()
-- List of items and their values
local x = 0
while x < 3500 do
    print("x is:", x)
    x = x + 1
    task.wait() -- Important for preventing crashes in infinite loops
	local args = {
	"Gemstone Cereal",
	"1"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemService"):WaitForChild("RF"):WaitForChild("UseItem"):InvokeServer(unpack(args))

end
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Use Item", 
    callback = function()
-- List of items and their values
local items = {
    {"Cookie", "3"},
    {"Donut", "3"},
    {"Banana", "2"},
    {"Dragon Fruit", "3"},
    {"Starfruit", "3"}
}

-- Reference to UseItem RemoteFunction
local useItem = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("ItemService")
    :WaitForChild("RF")
    :WaitForChild("UseItem")

-- Loop through all items and use them
for _, args in ipairs(items) do
    useItem:InvokeServer(unpack(args))
    task.wait(0.1) -- small delay to avoid lag
end

    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Anti AFK", 
    default = true, 
    callback = function()
local VirtualUser = game:GetService('VirtualUser')
game:GetService('Players').LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Anti AFK loaded!",
    Text = "Made by Tuuguu936",
    Button1 = "Okay",
    Duration = 5
})
    end
})
GUI:CreateButton({
    parent = main, 
    text = "Buy Medal", 
    callback = function()
local buyMedal = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("MedalMerchantService")
    :WaitForChild("RF")
    :WaitForChild("Buy")

buyMedal:InvokeServer("Rune Medal")
buyMedal:InvokeServer("Firework Medal")
buyMedal:InvokeServer("Feel Good Medal")
buyMedal:InvokeServer("Easter Medal")
buyMedal:InvokeServer("Soulfire Medal")
buyMedal:InvokeServer("Godly Medal")
buyMedal:InvokeServer("Thunder Medal")
buyMedal:InvokeServer("Bulk Medal")
buyMedal:InvokeServer("Temple Medal")
buyMedal:InvokeServer("Curler 3")
buyMedal:InvokeServer("Villain Medal")
buyMedal:InvokeServer("Captain Medal")
buyMedal:InvokeServer("Beach Medal")
buyMedal:InvokeServer("Trident Medal")
buyMedal:InvokeServer("Yin Yang Medal")
buyMedal:InvokeServer("Bandit Medal")
buyMedal:InvokeServer("Holly Medal")
buyMedal:InvokeServer("Volcano Medal")
buyMedal:InvokeServer("Spooky Medal")
buyMedal:InvokeServer("Endless Grips 1")
buyMedal:InvokeServer("Hallo Medal")
buyMedal:InvokeServer("Ninja Medal")
buyMedal:InvokeServer("Snowman Medal")
buyMedal:InvokeServer("Intruder Medal")
buyMedal:InvokeServer("Criminal Medal")
buyMedal:InvokeServer("Endless Summer 1")
buyMedal:InvokeServer("Prisoner Medal")
buyMedal:InvokeServer("Twilight Medal")
buyMedal:InvokeServer("Hacker Medal")
buyMedal:InvokeServer("Noob Medal")
buyMedal:InvokeServer("Haunted Medal")
buyMedal:InvokeServer("Fire Medal")
buyMedal:InvokeServer("Athlete Medal")
buyMedal:InvokeServer("Skull Medal")
buyMedal:InvokeServer("Gripper 3")
buyMedal:InvokeServer("Boombox Medal")
buyMedal:InvokeServer("Lucky 1 Medal")
buyMedal:InvokeServer("Guard Medal")
end
})
GUI:CreateButton({
    parent = main, 
    text = "Reedem Gamepass", 
    callback = function()
	local claim = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("SeasonPassService")
    :WaitForChild("RF")
    :WaitForChild("Claim")

claim:InvokeServer("Regular",1)
claim:InvokeServer("Regular",2)
claim:InvokeServer("Regular",3)
claim:InvokeServer("Regular",4)
claim:InvokeServer("Regular",5)
claim:InvokeServer("Regular",6)
claim:InvokeServer("Regular",7)
claim:InvokeServer("Regular",8)
claim:InvokeServer("Regular",9)
claim:InvokeServer("Regular",10)
claim:InvokeServer("Regular",11)
claim:InvokeServer("Regular",12)
claim:InvokeServer("Regular",13)
claim:InvokeServer("Regular",14)
claim:InvokeServer("Regular",15)
claim:InvokeServer("Regular",16)
claim:InvokeServer("Regular",17)
claim:InvokeServer("Regular",18)
claim:InvokeServer("Regular",19)
claim:InvokeServer("Regular",20)
claim:InvokeServer("Regular",21)
claim:InvokeServer("Regular",22)
claim:InvokeServer("Regular",23)
claim:InvokeServer("Regular",24)
claim:InvokeServer("Regular",25)
claim:InvokeServer("Regular",26)
claim:InvokeServer("Regular",27)
claim:InvokeServer("Regular",28)
claim:InvokeServer("Regular",29)
claim:InvokeServer("Regular",30)

end
})
GUI:CreateButton({
    parent = main, 
    text = "Reedem Code", 
    callback = function()
local redeem = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("CodeRedemptionService")
    :WaitForChild("RE")
    :WaitForChild("onRedeem")

redeem:FireServer("banker")
redeem:FireServer("sorryoops")
redeem:FireServer("timetravel")
redeem:FireServer("world19")
redeem:FireServer("bulk")
redeem:FireServer("superhero")
redeem:FireServer("tokenstore")
redeem:FireServer("captain")
redeem:FireServer("skullbeard")
redeem:FireServer("pirate")
redeem:FireServer("athlete")
redeem:FireServer("tradingback")
redeem:FireServer("blossom")
redeem:FireServer("ninja")
redeem:FireServer("snowops")
redeem:FireServer("hideout")
redeem:FireServer("cosmic")
redeem:FireServer("stocking")
redeem:FireServer("frostlands")
redeem:FireServer("polar")
redeem:FireServer("shiny")
redeem:FireServer("Christmas")
redeem:FireServer("hacker")
redeem:FireServer("classic")
redeem:FireServer("clans")
redeem:FireServer("rifted")
redeem:FireServer("hauntedmanor")
redeem:FireServer("trainers")
redeem:FireServer("ghosthunting")
redeem:FireServer("spooky")
redeem:FireServer("soon")
redeem:FireServer("hatching")
redeem:FireServer("billion")
redeem:FireServer("Heavenly")
redeem:FireServer("rework")
redeem:FireServer("paradise")
redeem:FireServer("wasteland")
redeem:FireServer("apocalypse")
redeem:FireServer("energy")
redeem:FireServer("royalty")
redeem:FireServer("performance")
redeem:FireServer("charms")
redeem:FireServer("wizard")
redeem:FireServer("atlantis")
redeem:FireServer("800mvisits")
redeem:FireServer("icecold")
redeem:FireServer("forging")
redeem:FireServer("noob")
redeem:FireServer("fixingstuff")
redeem:FireServer("celebration")
redeem:FireServer("glassbridge")
redeem:FireServer("octogames")
redeem:FireServer("brainrot")
redeem:FireServer("21iscoming")
redeem:FireServer("welovemining")
redeem:FireServer("sorryfordelay")

end})

local main = GUI:CreateTab("New Event", "squircle") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Option"
})
GUI:CreateToggle({
    parent = main, 
    text = "Equip Mining", 
    default = false, 
    callback = function(duck)
if duck then
local toolService = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("ToolService")
    :WaitForChild("RE")
    :WaitForChild("onGuiEquipRequest")

    _G.loop7 = true
	while _G.loop7 == true do
    -- Equip Dumbells
    toolService:FireServer("DesertMines", "Dumbells", "DesertMines12")
    task.wait(60) -- wait 1 minute

    -- Equip Grips
    toolService:FireServer("DesertMines", "Grips", "DesertMines12")
    task.wait(60) -- wait 1 minute
end
		else
		_G.loop7 = false
           end
        print("Toggle state:", duck)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Equip Knuckle", 
    default = false, 
    callback = function(knuckle)
if knuckle then
        _G.knuckle1 = true
	while _G.knuckle1 == true do
task.wait()
local args = {
	"DesertMines",
	"Tier5"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("PunchBagService"):WaitForChild("RE"):WaitForChild("onGiveStats"):FireServer(unpack(args))
local args = {
	"DesertMines",
	"Tier5"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("PunchBagService"):WaitForChild("RE"):WaitForChild("onGiveStats"):FireServer(unpack(args))

 end
		else
		_G.knuckle1 = false
           end
        print("Toggle state:", knuckle)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Mining Tower", 
    default = false, 
    callback = function(trialmining)
if trialmining then
        _G.trialmining1 = true
			while _G.trialmining1 == true do
task.wait()			
local args = {
	true
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ArmWrestleService"):WaitForChild("RF"):WaitForChild("SetAuto"):InvokeServer(unpack(args))
local args = {
	"MiningTower",
	true
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TowerService"):WaitForChild("RF"):WaitForChild("EnterTower"):InvokeServer(unpack(args))
end
		else
		_G.trialmining1 = false
        end
		print("Toggle state:", trialmining)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Trial Ice Lake", 
    default = false, 
    callback = function(Trialice)
if Trialice then
        _G.Trialice1 = true
			while _G.Trialice1 == true do
task.wait()			
local args = {"Icy"}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChampionshipService"):WaitForChild("RF"):WaitForChild("RequestJoin"):InvokeServer(unpack(args))
end
		else
		_G.Trialice1 = false
        end
		print("Toggle state:", Trialice)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Trial 13", 
    default = false, 
    callback = function(losttower)
if losttower then
        _G.losttower1 = true
	while _G.losttower1 == true do
task.wait(0.1)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChampionshipService"):WaitForChild("RF"):WaitForChild("RequestJoin"):InvokeServer("Medieval")
end
	  		else
		      _G.losttower1 = false
            end
print("Toggle state:", losttower)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Space Center", 
    default = false, 
    callback = function(stage)
if stage then
        _G.stage1 = true
	while _G.stage1 == true do
task.wait()
local args = {
	"SpaceTower",
	true
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TowerService"):WaitForChild("RF"):WaitForChild("EnterTower"):InvokeServer(unpack(args))

end
	  		else
		      _G.stage1 = false
            end
print("Toggle state:", stage)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Mining Tower", 
    default = false, 
    callback = function(mining)
if mining then
        _G.mining1 = true
	while _G.mining1 == true do
task.wait()
local args = {
	"MiningTower",
	true
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TowerService"):WaitForChild("RF"):WaitForChild("EnterTower"):InvokeServer(unpack(args))

end
	  		else
		      _G.mining1 = false
            end
print("Toggle state:", mining)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Boss Egyptian miner", 
    default = false, 
    callback = function(boss20)
if boss20 then
        _G.boss201 = true
			while _G.boss201 == true do
task.wait()		
local ArmWrestleService = game:GetService("ReplicatedStorage")
    :WaitForChild("Packages")
    :WaitForChild("Knit")
    :WaitForChild("Services")
    :WaitForChild("ArmWrestleService")
    :WaitForChild("RF")

-- Start fight
ArmWrestleService:WaitForChild("RequestStartFight"):InvokeServer("EgyptianMiner")

-- Enable auto
ArmWrestleService:WaitForChild("SetAuto"):InvokeServer(true)

-- Disable auto
ArmWrestleService:WaitForChild("SetAuto"):InvokeServer(false)
end
		else
		_G.boss201 = false
        end
		print("Toggle state:", boss20)
    end
})

local main = GUI:CreateTab("misc", "cake") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Shortcut"
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Daily Login", 
    default = true, 
    callback = function(dailylogin)
if dailylogin then
        _G.dailylogin1 = true
			while _G.dailylogin1 == true do
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("DailyRewardService"):WaitForChild("RE"):WaitForChild("onClaimReward"):FireServer()
task.wait(20)
                        end
		else
		_G.dailylogin1 = false
        end
		print("Toggle state:", dailylogin)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Spin Tralalero", 
    default = false, 
    callback = function(Spinfrontman)
if Spinfrontman then
        _G.Spinfrontman1 = true
	while _G.Spinfrontman1 == true do
		task.wait()
local args = {
	"Tralalero Fortune",
	"x25"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))
end
		else
		_G.Spinfrontman1 = false
           end
        print("Toggle state:", Spinfrontman)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Spin Space", 
    default = false, 
    callback = function(Space)
if Space then
        _G.Space1 = true
	while _G.Space1 == true do
		task.wait()
local args = {
	"Space Fortune",
	"x25"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))
end
		else
		_G.Space1 = false
           end
        print("Toggle state:", Space)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Spin Miner Fortune", 
    default = false, 
    callback = function(minerfortune)
if minerfortune then
        _G.minerfortune1 = true
	while _G.minerfortune1 == true do
		task.wait()
local args = {
	"Miners Fortune",
	"x25"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("SpinnerService"):WaitForChild("RF"):WaitForChild("Spin"):InvokeServer(unpack(args))
end
		else
		_G.minerfortune1 = false
           end
        print("Toggle state:", minerfortune)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Open Trainer", 
    default = true, 
    callback = function(trainer)
if trainer then
        _G.loop4 = true
	while _G.loop4 == true do
		task.wait(3)
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Starter Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Gold Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Mythic Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Premium Crate")
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("TrainerService"):WaitForChild("RF"):WaitForChild("OpenCrate"):InvokeServer("Prism Crate")
end
		else
		_G.loop4 = false
           end
		print("Toggle state:", trainer)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Open Kingdom Chest", 
    default = false, 
    callback = function(Kingdom)
if Kingdom then
        _G.loop33 = true
	while _G.loop33 == true do
		task.wait(0.1)
local args = {"KingdomChest"}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChestService"):WaitForChild("RF"):WaitForChild("Open"):InvokeServer(unpack(args))
           end
		else
		_G.loop33 = false
           end
		print("Toggle state:", Kingdom)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Open Ice Chest", 
    default = false, 
    callback = function(ice)
if ice then
        _G.ice1 = true
	while _G.ice1 == true do
		task.wait(0.1)
local args = {
	"IcyChest"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ChestService"):WaitForChild("RF"):WaitForChild("Open"):InvokeServer(unpack(args))
           end
		else
		_G.ice1 = false
           end
		print("Toggle state:", ice)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Use Raspbery", 
    default = false, 
    callback = function(Dalgona)
if Dalgona then
        _G.Dalgona1 = true
	while _G.Dalgona1 == true do
		task.wait()
local args = {
	"Raspberry",
	"2"
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemService"):WaitForChild("RF"):WaitForChild("UseItem"):InvokeServer(unpack(args))
end
		else
		_G.Dalgona1 = false
           end
        print("Toggle state:", Dalgona)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Upgrade Snack", 
    default = false, 
    callback = function(upgrade)
if upgrade then
        _G.upgrade1 = true
	while _G.upgrade1 == true do
task.wait()
local args = {{Item = "Raspberry",Tier = 1}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Cookie",Tier = 1}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Cookie",Tier = 2}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Dragon Fruit",Tier = 1}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Dragon Fruit",Tier = 2}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Donut",Tier = 1}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Donut",Tier = 2}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Starfruit",Tier = 1}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
local args = {{Item = "Starfruit",Tier = 2}}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItemCraftingService"):WaitForChild("RF"):WaitForChild("UpgradeSnack"):InvokeServer(unpack(args))
end
		else
		_G.upgrade1 = false
           end
        print("Toggle state:", upgrade)
    end
})

local main = GUI:CreateTab("misc", "egg") -- You can use IconID we didnt impleemnt lucid or any external icons
GUI:CreateSection({
    parent = main, 
    text = "Egg Hatch"
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Saturno Egg", 
    default = false, 
    callback = function(Saturno)
if Saturno then
        _G.Saturno1 = true
	while _G.Saturno1 == true do
		task.wait(0.1)
local args = {
	"Saturno",
	[5] = true,
	[4] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
end
		else
		_G.Saturno1 = false
           end
        print("Toggle state:", Saturno)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Mine Desert Egg", 
    default = false, 
    callback = function(BrainrotForest)
if BrainrotForest then
        _G.BrainrotForest1 = true
	while _G.BrainrotForest1 == true do
		task.wait(0.1)
local args = {
	"OrangeSpikedCrystal",
	[5] = true,
	[4] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
end
		else
		_G.BrainrotForest1 = false
           end
        print("Toggle state:", BrainrotForest)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Brainrot Food Egg", 
    default = false, 
    callback = function(BrainrotFood)
if BrainrotFood then
        _G.BrainrotFood1 = true
	while _G.BrainrotFood1 == true do
		task.wait(0.1)
local args = {
	"BrainrotFood",
	[5] = true,
	[4] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
end
		else
		_G.BrainrotFood1 = false
           end
        print("Toggle state:", BrainrotFood)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Cold Brainrot Egg", 
    default = false, 
    callback = function(ColdBrainrot)
if ColdBrainrot then
        _G.ColdBrainrot1 = true
	while _G.ColdBrainrot1 == true do
		task.wait(0.1)
local args = {
	"ColdBrainrot",
	[5] = true,
	[4] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
end
		else
		_G.ColdBrainrot1 = false
           end
        print("Toggle state:", ColdBrainrot)
    end
})
GUI:CreateToggle({
    parent = main, 
    text = "Auto Lucky Brainrot Egg", 
    default = false, 
    callback = function(LuckyBrainrot)
if LuckyBrainrot then
        _G.LuckyBrainrot1 = true
	while _G.LuckyBrainrot1 == true do
		task.wait(0.1)
local args = {
	"LuckyBrainrot",
	[5] = true,
	[4] = false
}
game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("EggService"):WaitForChild("RF"):WaitForChild("purchaseEgg"):InvokeServer(unpack(args))
end
		else
		_G.LuckyBrainrot1 = false
           end
        print("Toggle state:", LuckyBrainrot)
    end
})

